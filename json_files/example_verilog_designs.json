[
    {
        "file_name": "module_i2c.v",
        "verilog_design": "`timescale 1ns/1ps module module_i2c#( parameter integer DWIDTH = 32, parameter integer AWIDTH = 14 ) ( input PCLK, input PRESETn, input fifo_tx_f_full, input fifo_tx_f_empty, input [DWIDTH-1:0] fifo_tx_data_out, input fifo_rx_f_full, input fifo_rx_f_empty, output reg fifo_rx_wr_en, output reg [DWIDTH-1:0] fifo_rx_data_in, input [AWIDTH-1:0] DATA_CONFIG_REG, input [AWIDTH-1:0] TIMEOUT_TX, output reg fifo_tx_rd_en, output TX_EMPTY, output RX_EMPTY, output ERROR, output ENABLE_SDA, output ENABLE_SCL, inout SDA, inout SCL ); assign TX_EMPTY = (fifo_tx_f_empty == 1'b1)? 1'b1:1'b0; assign RX_EMPTY = (fifo_rx_f_empty == 1'b1)? 1'b1:1'b0; reg [1:0] count_tx; reg [1:0] count_rx; reg [11:0] count_send_data; reg [11:0] count_receive_data; reg [11:0] count_timeout; reg BR_CLK_O; reg SDA_OUT; reg BR_CLK_O_RX; reg SDA_OUT_RX; reg RESPONSE; localparam [5:0] IDLE = 6'd0, START = 6'd1, CONTROLIN_1 = 6'd2, CONTROLIN_2 = 6'd3, CONTROLIN_3 = 6'd4, CONTROLIN_4 = 6'd5, CONTROLIN_5 = 6'd6, CONTROLIN_6 = 6'd7, CONTROLIN_7 = 6'd8, CONTROLIN_8 = 6'd9, RESPONSE_CIN =6'd10, ADDRESS_1 = 6'd11, ADDRESS_2 = 6'd12, ADDRESS_3 = 6'd13, ADDRESS_4 = 6'd14, ADDRESS_5 = 6'd15, ADDRESS_6 = 6'd16, ADDRESS_7 = 6'd17, ADDRESS_8 = 6'd18, RESPONSE_ADDRESS =6'd19, DATA0_1 = 6'd20, DATA0_2 = 6'd21, DATA0_3 = 6'd22, DATA0_4 = 6'd23, DATA0_5 = 6'd24, DATA0_6 = 6'd25, DATA0_7 = 6'd26, DATA0_8 = 6'd27, RESPONSE_DATA0_1 = 6'd28, DATA1_1 = 6'd29, DATA1_2 = 6'd30, DATA1_3 = 6'd31, DATA1_4 = 6'd32, DATA1_5 = 6'd33, DATA1_6 = 6'd34, DATA1_7 = 6'd35, DATA1_8 = 6'd36, RESPONSE_DATA1_1 = 6'd37, DELAY_BYTES = 6'd38, NACK = 6'd39, STOP = 6'd40; reg [5:0] state_tx; reg [5:0] next_state_tx; assign SDA =(DATA_CONFIG_REG[0] == 1'b1 & DATA_CONFIG_REG[1] == 1'b0 & state_tx != RESPONSE_CIN & state_tx != RESPONSE_ADDRESS & state_tx != RESPONSE_DATA0_1 & state_tx != RESPONSE_DATA1_1)?SDA_OUT:SDA_OUT_RX; assign SCL = (DATA_CONFIG_REG[0] == 1'b1 & DATA_CONFIG_REG[1] == 1'b0)?BR_CLK_O:BR_CLK_O_RX; assign ERROR = (DATA_CONFIG_REG[0] == 1'b1 & DATA_CONFIG_REG[1] == 1'b1)?1'b1:1'b0; always@(*) begin next_state_tx=state_tx; case(state_tx) IDLE: begin if(DATA_CONFIG_REG[0] == 1'b0 && (fifo_tx_f_full == 1'b1 || fifo_tx_f_empty == 1'b0) && DATA_CONFIG_REG[1] == 1'b0) begin next_state_tx = IDLE; end else if(DATA_CONFIG_REG[0] == 1'b1 && (fifo_tx_f_full == 1'b1 || fifo_tx_f_empty == 1'b0) && DATA_CONFIG_REG[1] == 1'b1) begin next_state_tx = IDLE; end else if(DATA_CONFIG_REG[0] == 1'b1 && ((fifo_tx_f_full == 1'b0 && fifo_tx_f_empty == 1'b0) || fifo_tx_f_full == 1'b1) && DATA_CONFIG_REG[1] == 1'b0 && count_timeout < TIMEOUT_TX) begin next_state_tx = START; end end START: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = START; end else begin next_state_tx = CONTROLIN_1; end end CONTROLIN_1: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = CONTROLIN_1; end else begin next_state_tx = CONTROLIN_2; end end CONTROLIN_2: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = CONTROLIN_2; end else begin next_state_tx = CONTROLIN_3; end end CONTROLIN_3: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = CONTROLIN_3; end else begin next_state_tx = CONTROLIN_4; end end CONTROLIN_4: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = CONTROLIN_4; end else begin next_state_tx = CONTROLIN_5; end end CONTROLIN_5: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = CONTROLIN_5; end else begin next_state_tx = CONTROLIN_6; end end CONTROLIN_6: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = CONTROLIN_6; end else begin next_state_tx = CONTROLIN_7; end end CONTROLIN_7: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = CONTROLIN_7; end else begin next_state_tx = CONTROLIN_8; end end CONTROLIN_8: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = CONTROLIN_8; end else begin next_state_tx = RESPONSE_CIN; end end RESPONSE_CIN: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = RESPONSE_CIN; end else if(RESPONSE == 1'b0) begin next_state_tx = DELAY_BYTES; end else if(RESPONSE == 1'b1) begin next_state_tx = NACK; end end ADDRESS_1: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = ADDRESS_1; end else begin next_state_tx = ADDRESS_2; end end ADDRESS_2: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = ADDRESS_2; end else begin next_state_tx = ADDRESS_3; end end ADDRESS_3: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = ADDRESS_3; end else begin next_state_tx = ADDRESS_4; end end ADDRESS_4: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = ADDRESS_4; end else begin next_state_tx = ADDRESS_5; end end ADDRESS_5: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = ADDRESS_5; end else begin next_state_tx = ADDRESS_6; end end ADDRESS_6: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = ADDRESS_6; end else begin next_state_tx = ADDRESS_7; end end ADDRESS_7: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = ADDRESS_7; end else begin next_state_tx = ADDRESS_8; end end ADDRESS_8: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = ADDRESS_8; end else begin next_state_tx = RESPONSE_ADDRESS; end end RESPONSE_ADDRESS: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = RESPONSE_ADDRESS; end else if(RESPONSE == 1'b0) begin next_state_tx = DELAY_BYTES; end else if(RESPONSE == 1'b1) begin next_state_tx = NACK; end end DATA0_1: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = DATA0_1; end else begin next_state_tx = DATA0_2; end end DATA0_2: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = DATA0_2; end else begin next_state_tx = DATA0_3; end end DATA0_3: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = DATA0_3; end else begin next_state_tx = DATA0_4; end end DATA0_4: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = DATA0_4; end else begin next_state_tx = DATA0_5; end end DATA0_5: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = DATA0_5; end else begin next_state_tx = DATA0_6; end end DATA0_6: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = DATA0_6; end else begin next_state_tx = DATA0_7; end end DATA0_7: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = DATA0_7; end else begin next_state_tx = DATA0_8; end end DATA0_8: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = DATA0_8; end else begin next_state_tx = RESPONSE_DATA0_1; end end RESPONSE_DATA0_1: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = RESPONSE_DATA0_1; end else if(RESPONSE == 1'b0) begin next_state_tx = DELAY_BYTES; end else if(RESPONSE == 1'b1) begin next_state_tx = NACK; end end DATA1_1: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = DATA1_1; end else begin next_state_tx = DATA1_2; end end DATA1_2: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = DATA1_2; end else begin next_state_tx = DATA1_3; end end DATA1_3: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = DATA1_3; end else begin next_state_tx = DATA1_4; end end DATA1_4: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = DATA1_4; end else begin next_state_tx = DATA1_5; end end DATA1_5: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = DATA1_5; end else begin next_state_tx = DATA1_6; end end DATA1_6: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = DATA1_6; end else begin next_state_tx = DATA1_7; end end DATA1_7: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = DATA1_7; end else begin next_state_tx = DATA1_8; end end DATA1_8: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = DATA1_8; end else begin next_state_tx = RESPONSE_DATA1_1; end end RESPONSE_DATA1_1: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = RESPONSE_DATA1_1; end else if(RESPONSE == 1'b0) begin next_state_tx = DELAY_BYTES; end else if(RESPONSE == 1'b1) begin next_state_tx = NACK; end end DELAY_BYTES: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = DELAY_BYTES; end else begin if(count_tx == 2'd0) begin next_state_tx = ADDRESS_1; end else if(count_tx == 2'd1) begin next_state_tx = DATA0_1; end else if(count_tx == 2'd2) begin next_state_tx = DATA1_1; end else if(count_tx == 2'd3) begin next_state_tx = STOP; end end end NACK: begin if(count_send_data != DATA_CONFIG_REG[13:2]*2'd2) begin next_state_tx = NACK; end else begin if(count_tx == 2'd0) begin next_state_tx = CONTROLIN_1; end else if(count_tx == 2'd1) begin next_state_tx = ADDRESS_1; end else if(count_tx == 2'd2) begin next_state_tx = DATA0_1; end else if(count_tx == 2'd3) begin next_state_tx = DATA1_1; end end end STOP: begin if(count_send_data != DATA_CONFIG_REG[13:2]) begin next_state_tx = STOP; end else begin next_state_tx = IDLE; end end default: begin next_state_tx = IDLE; end endcase end always@(posedge PCLK) begin if(!PRESETn) begin count_send_data <= 12'd0; state_tx <= IDLE; SDA_OUT<= 1'b1; fifo_tx_rd_en <= 1'b0; count_tx <= 2'd0; BR_CLK_O <= 1'b1; RESPONSE<= 1'b0; end else begin state_tx <= next_state_tx; case(state_tx) IDLE: begin fifo_tx_rd_en <= 1'b0; if(DATA_CONFIG_REG[0] == 1'b0 && (fifo_tx_f_full == 1'b1 ||fifo_tx_f_empty == 1'b0) && DATA_CONFIG_REG[1] == 1'b0) begin count_send_data <= 12'd0; SDA_OUT<= 1'b1; BR_CLK_O <= 1'b1; end else if(DATA_CONFIG_REG[0] == 1'b1 && ((fifo_tx_f_empty == 1'b0 && fifo_tx_f_full == 1'b0 )|| fifo_tx_f_full == 1'b1 ) && DATA_CONFIG_REG[1] == 1'b0) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=1'b0; end else if(DATA_CONFIG_REG[0] == 1'b1 && (fifo_tx_f_full == 1'b1 ||fifo_tx_f_empty == 1'b0) && DATA_CONFIG_REG[1] == 1'b1) begin count_send_data <= 12'd0; SDA_OUT<= 1'b1; BR_CLK_O <= 1'b1; end end START: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; BR_CLK_O <= 1'b0; end else begin count_send_data <= 12'd0; end if(count_send_data == DATA_CONFIG_REG[13:2]- 12'd1) begin SDA_OUT<=fifo_tx_data_out[0:0]; count_tx <= 2'd0; end end CONTROLIN_1: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[0:0]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[1:1]; end end CONTROLIN_2: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[1:1]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[2:2]; end end CONTROLIN_3: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[2:2]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[3:3]; end end CONTROLIN_4: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[3:3]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[4:4]; end end CONTROLIN_5: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[4:4]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[5:5]; end end CONTROLIN_6: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[5:5]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[6:6]; end end CONTROLIN_7: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[6:6]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[7:7]; end end CONTROLIN_8: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[7:7]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<= 1'b0; end end RESPONSE_CIN: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; RESPONSE<= SDA; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; end end ADDRESS_1: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[8:8]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[9:9]; end end ADDRESS_2: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[9:9]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[10:10]; end end ADDRESS_3: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[10:10]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[11:11]; end end ADDRESS_4: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[11:11]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[12:12]; end end ADDRESS_5: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[12:12]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[13:13]; end end ADDRESS_6: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[13:13]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[14:14]; end end ADDRESS_7: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[14:14]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[15:15]; end end ADDRESS_8: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[15:15]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=1'b0; end end RESPONSE_ADDRESS: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; RESPONSE<= SDA; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; end end DATA0_1: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[16:16]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[17:17]; end end DATA0_2: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[17:17]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[18:18]; end end DATA0_3: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[18:18]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[19:19]; end end DATA0_4: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[19:19]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[20:20]; end end DATA0_5: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[20:20]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[21:21]; end end DATA0_6: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[21:21]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[22:22]; end end DATA0_7: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[22:22]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[23:23]; end end DATA0_8: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[23:23]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=1'b0; end end RESPONSE_DATA0_1: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; RESPONSE<= SDA; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; end end DATA1_1: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[24:24]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[25:25]; end end DATA1_2: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[25:25]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[26:26]; end end DATA1_3: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[26:26]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[27:27]; end end DATA1_4: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[27:27]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[28:28]; end end DATA1_5: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[28:28]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[29:29]; end end DATA1_6: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[29:29]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[30:30]; end end DATA1_7: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[30:30]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=fifo_tx_data_out[31:31]; end end DATA1_8: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; SDA_OUT<=fifo_tx_data_out[31:31]; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; SDA_OUT<=1'b0; end end RESPONSE_DATA1_1: begin if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; RESPONSE<= SDA; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd4) begin BR_CLK_O <= 1'b0; end else if(count_send_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_send_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin BR_CLK_O <= 1'b1; end else begin BR_CLK_O <= 1'b0; end end else begin count_send_data <= 12'd0; fifo_tx_rd_en <= 1'b1; end end DELAY_BYTES: begin fifo_tx_rd_en <= 1'b0; if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; BR_CLK_O <= 1'b0; SDA_OUT<=1'b0; end else begin if(count_tx == 2'd0) begin count_tx <= count_tx + 2'd1; SDA_OUT<=fifo_tx_data_out[8:8]; end else if(count_tx == 2'd1) begin count_tx <= count_tx + 2'd1; SDA_OUT<=fifo_tx_data_out[16:16]; end else if(count_tx == 2'd2) begin count_tx <= count_tx + 2'd1; SDA_OUT<=fifo_tx_data_out[24:24]; end else if(count_tx == 2'd3) begin count_tx <= 2'd0; end count_send_data <= 12'd0; end end NACK: begin fifo_tx_rd_en <= 1'b0; if(count_send_data < DATA_CONFIG_REG[13:2]*2'd3) begin count_send_data <= count_send_data + 12'd1; if(count_receive_data < DATA_CONFIG_REG[13:2]/12'd2) begin SDA_OUT<=1'b0; end else if(count_send_data > DATA_CONFIG_REG[13:2]/12'd2-12'd1 && count_send_data < DATA_CONFIG_REG[13:2]) begin SDA_OUT<=1'b1; end else if(count_send_data == DATA_CONFIG_REG[13:2]*2'd2) begin SDA_OUT<=1'b0; end if(count_send_data < DATA_CONFIG_REG[13:2]/12'd2) begin BR_CLK_O <= 1'b1; end else if(count_send_data > DATA_CONFIG_REG[13:2]/12'd2-12'd1 && count_send_data < DATA_CONFIG_REG[13:2]) begin BR_CLK_O <= 1'b0; end else if(count_send_data < DATA_CONFIG_REG[13:2]*2'd2) begin BR_CLK_O <= 1'b1; end end else begin count_send_data <= 12'd0; if(count_tx == 2'd0) begin count_tx <= 2'd0; SDA_OUT<=fifo_tx_data_out[0:0]; end else if(count_tx == 2'd1) begin count_tx <= 2'd1; SDA_OUT<=fifo_tx_data_out[8:8]; end else if(count_tx == 2'd2) begin count_tx <= 2'd2; SDA_OUT<=fifo_tx_data_out[16:16]; end else if(count_tx == 2'd3) begin count_tx <= 2'd3; SDA_OUT<=fifo_tx_data_out[24:24]; end end end STOP: begin BR_CLK_O <= 1'b1; if(count_send_data < DATA_CONFIG_REG[13:2]) begin count_send_data <= count_send_data + 12'd1; if(count_send_data < DATA_CONFIG_REG[13:2]/12'd2-12'd2) begin SDA_OUT<=1'b0; end else if(count_send_data > DATA_CONFIG_REG[13:2]/12'd2-12'd1 && count_send_data < DATA_CONFIG_REG[13:2]) begin SDA_OUT<=1'b1; end end else begin count_send_data <= 12'd0; end end default: begin fifo_tx_rd_en <= 1'b0; count_send_data <= 12'd4095; end endcase end end reg [5:0] state_rx; reg [5:0] next_state_rx; assign ENABLE_SDA = (state_rx == RESPONSE_CIN|| state_rx == RESPONSE_ADDRESS|| state_rx == RESPONSE_DATA0_1|| state_rx == RESPONSE_DATA1_1)?1'b1: (state_tx == RESPONSE_CIN|| state_tx == RESPONSE_ADDRESS|| state_tx == RESPONSE_DATA0_1|| state_tx == RESPONSE_DATA1_1)?1'b0:1'b1; assign ENABLE_SCL = (state_rx == RESPONSE_CIN|| state_rx == RESPONSE_ADDRESS|| state_rx == RESPONSE_DATA0_1|| state_rx == RESPONSE_DATA1_1)?1'b1: (state_tx == RESPONSE_CIN|| state_tx == RESPONSE_ADDRESS|| state_tx == RESPONSE_DATA0_1|| state_tx == RESPONSE_DATA1_1)?1'b1:1'b0; always@(*) begin next_state_rx = state_rx; case(state_rx) IDLE: begin if(DATA_CONFIG_REG[0] == 1'b0 && DATA_CONFIG_REG[1] == 1'b0) begin next_state_rx = IDLE; end else if(DATA_CONFIG_REG[0] == 1'b1 && DATA_CONFIG_REG[1] == 1'b1) begin next_state_rx = IDLE; end else if(DATA_CONFIG_REG[0] == 1'b0 && DATA_CONFIG_REG[1] == 1'b1 && SDA_OUT_RX == 1'b0 && BR_CLK_O_RX == 1'b0) begin next_state_rx = START; end end START: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = START; end else if(fifo_rx_data_in[0] == 1'b0 && fifo_rx_data_in[1] == 1'b0) begin next_state_rx = CONTROLIN_1; end else begin next_state_rx = IDLE; end end CONTROLIN_1: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = CONTROLIN_1; end else begin next_state_rx = CONTROLIN_2; end end CONTROLIN_2: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = CONTROLIN_2; end else begin next_state_rx = CONTROLIN_3; end end CONTROLIN_3: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = CONTROLIN_3; end else begin next_state_rx = CONTROLIN_4; end end CONTROLIN_4: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = CONTROLIN_4; end else begin next_state_rx = CONTROLIN_5; end end CONTROLIN_5: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = CONTROLIN_5; end else begin next_state_rx = CONTROLIN_6; end end CONTROLIN_6: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = CONTROLIN_6; end else begin next_state_rx = CONTROLIN_7; end end CONTROLIN_7: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = CONTROLIN_7; end else begin next_state_rx = CONTROLIN_8; end end CONTROLIN_8: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = CONTROLIN_8; end else begin next_state_rx = RESPONSE_CIN; end end RESPONSE_CIN: begin if(count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = RESPONSE_CIN; end else if(RESPONSE == 1'b0) begin next_state_rx = DELAY_BYTES; end else if(RESPONSE == 1'b1) begin next_state_rx = NACK; end end ADDRESS_1: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = ADDRESS_1; end else begin next_state_rx = ADDRESS_2; end end ADDRESS_2: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = ADDRESS_2; end else begin next_state_rx = ADDRESS_3; end end ADDRESS_3: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = ADDRESS_3; end else begin next_state_rx = ADDRESS_4; end end ADDRESS_4: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = ADDRESS_4; end else begin next_state_rx = ADDRESS_5; end end ADDRESS_5: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = ADDRESS_5; end else begin next_state_rx = ADDRESS_6; end end ADDRESS_6: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = ADDRESS_6; end else begin next_state_rx = ADDRESS_7; end end ADDRESS_7: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = ADDRESS_7; end else begin next_state_rx = ADDRESS_8; end end ADDRESS_8: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = ADDRESS_8; end else begin next_state_rx = RESPONSE_ADDRESS; end end RESPONSE_ADDRESS: begin if(count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = RESPONSE_ADDRESS; end else if(RESPONSE == 1'b0) begin next_state_rx = DELAY_BYTES; end else if(RESPONSE == 1'b1) begin next_state_rx = NACK; end end DATA0_1: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = DATA0_1; end else begin next_state_rx = DATA0_2; end end DATA0_2: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = DATA0_2; end else begin next_state_rx = DATA0_3; end end DATA0_3: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = DATA0_3; end else begin next_state_rx = DATA0_4; end end DATA0_4: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = DATA0_4; end else begin next_state_rx = DATA0_5; end end DATA0_5: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = DATA0_5; end else begin next_state_rx = DATA0_6; end end DATA0_6: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = DATA0_6; end else begin next_state_rx = DATA0_7; end end DATA0_7: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = DATA0_7; end else begin next_state_rx = DATA0_8; end end DATA0_8: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = DATA0_8; end else begin next_state_rx = RESPONSE_DATA0_1; end end RESPONSE_DATA0_1: begin if(count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = RESPONSE_DATA0_1; end else if(RESPONSE == 1'b0) begin next_state_rx = DELAY_BYTES; end else if(RESPONSE == 1'b1) begin next_state_rx = NACK; end end DATA1_1: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = DATA1_1; end else begin next_state_rx = DATA1_2; end end DATA1_2: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = DATA1_2; end else begin next_state_rx = DATA1_3; end end DATA1_3: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = DATA1_3; end else begin next_state_rx = DATA1_4; end end DATA1_4: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = DATA1_4; end else begin next_state_rx = DATA1_5; end end DATA1_5: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = DATA1_5; end else begin next_state_rx = DATA1_6; end end DATA1_6: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = DATA1_6; end else begin next_state_rx = DATA1_7; end end DATA1_7: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = DATA1_7; end else begin next_state_rx = DATA1_8; end end DATA1_8: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = DATA1_8; end else begin next_state_rx = RESPONSE_DATA1_1; end end RESPONSE_DATA1_1: begin if(count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = RESPONSE_DATA0_1; end else if(RESPONSE == 1'b0) begin next_state_rx = DELAY_BYTES; end else if(RESPONSE == 1'b1) begin next_state_rx = NACK; end end DELAY_BYTES: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = DELAY_BYTES; end else begin if(count_rx == 2'd0) begin next_state_rx = ADDRESS_1; end else if(count_rx == 2'd1) begin next_state_rx = DATA0_1; end else if(count_rx == 2'd2) begin next_state_rx = DATA1_1; end else if(count_rx == 2'd3) begin next_state_rx = STOP; end end end STOP: begin if( count_receive_data != DATA_CONFIG_REG[13:2]) begin next_state_rx = STOP; end else begin next_state_rx = IDLE; end end default: begin next_state_rx = IDLE; end endcase end always@(posedge PCLK) begin if(!PRESETn) begin count_receive_data <= 12'd0; state_rx <= IDLE; SDA_OUT_RX<= 1'b0; fifo_rx_wr_en <= 1'b0; count_rx <= 2'd0; BR_CLK_O_RX <= 1'b0; end else begin state_rx <= next_state_rx; case(state_rx) IDLE: begin if(((fifo_rx_f_full == 1'b0 && fifo_rx_f_empty == 1'b0) || (fifo_rx_f_full == 1'b0 && fifo_rx_f_empty == 1'b1)) && DATA_CONFIG_REG[1] == 1'b1) begin SDA_OUT_RX<= SDA; BR_CLK_O_RX<=SCL; count_receive_data <= count_receive_data + 12'd1; end else begin SDA_OUT_RX<= SDA_OUT_RX; BR_CLK_O_RX<=BR_CLK_O_RX; count_receive_data <= count_receive_data; end end START: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if( count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[0]<= SDA; fifo_rx_data_in[1]<= SCL; end end CONTROLIN_1: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[0]<= SDA; end end CONTROLIN_2: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[1]<= SDA; end end CONTROLIN_3: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[2]<= SDA; end end CONTROLIN_4: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[3]<= SDA; end end CONTROLIN_5: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[4]<= SDA; end end CONTROLIN_6: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[5]<= SDA; end end CONTROLIN_7: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[6]<= SDA; end end CONTROLIN_8: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[7]<= SDA; end end RESPONSE_CIN: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end end ADDRESS_1: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[8]<= SDA; end end ADDRESS_2: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[9]<= SDA; end end ADDRESS_3: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[10]<= SDA; end end ADDRESS_4: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[11]<= SDA; end end ADDRESS_5: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[12]<= SDA; end end ADDRESS_6: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[13]<= SDA; end end ADDRESS_7: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[14]<= SDA; end end ADDRESS_8: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[15]<= SDA; end end RESPONSE_ADDRESS: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end end DATA0_1: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[16]<= SDA; end end DATA0_2: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[17]<= SDA; end end DATA0_3: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[18]<= SDA; end end DATA0_4: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[19]<= SDA; end end DATA0_5: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[20]<= SDA; end end DATA0_6: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[21]<= SDA; end end DATA0_7: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[22]<= SDA; end end DATA0_8: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[23]<= SDA; end end RESPONSE_DATA0_1: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end end DATA1_1: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[24]<= SDA; end end DATA1_2: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[25]<= SDA; end end DATA1_3: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[26]<= SDA; end end DATA1_4: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[27]<= SDA; end end DATA1_5: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[28]<= SDA; end end DATA1_6: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[29]<= SDA; end end DATA1_7: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[30]<= SDA; end end DATA1_8: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end if(SCL == 1'b1 && count_receive_data >= DATA_CONFIG_REG[13:2]/12'd4 && count_receive_data < (DATA_CONFIG_REG[13:2]-(DATA_CONFIG_REG[13:2]/12'd4))-12'd1) begin fifo_rx_data_in[31]<= SDA; end end RESPONSE_DATA1_1: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end end DELAY_BYTES: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin if(count_rx == 2'd0) begin count_rx <= count_rx + 2'd1; end else if(count_rx == 2'd1) begin count_rx <= count_tx + 2'd1; end else if(count_rx == 2'd2) begin count_rx <= count_rx + 2'd1; end else if(count_rx == 2'd3) begin count_rx <= 2'd0; end count_receive_data <= 12'd0; end end STOP: begin if( count_receive_data < DATA_CONFIG_REG[13:2]) begin count_receive_data <= count_receive_data + 12'd1; end else begin count_receive_data <= 12'd0; end fifo_rx_wr_en <= 1'b0; end default: begin fifo_rx_wr_en <= 1'b0; count_receive_data <= 12'd4095; end endcase end end always@(posedge PCLK) begin if(!PRESETn) begin count_timeout <= 12'd0; end else begin if(count_timeout <= TIMEOUT_TX && state_tx == IDLE) begin if(SDA == 1'b0 && SCL == 1'b0) count_timeout <= count_timeout + 12'd1; end else begin count_timeout <= 12'd0; end end end endmodule"
    },
    {
        "file_name": "can_acf.v",
        "verilog_design": "`include \"timescale.v\" `include \"can_defines.v\" module can_acf ( clk, rst, id, reset_mode, acceptance_filter_mode, extended_mode, acceptance_code_0, acceptance_code_1, acceptance_code_2, acceptance_code_3, acceptance_mask_0, acceptance_mask_1, acceptance_mask_2, acceptance_mask_3, go_rx_crc_lim, go_rx_inter, go_error_frame, data0, data1, rtr1, rtr2, ide, no_byte0, no_byte1, id_ok ); parameter Tp = 1; input clk; input rst; input [28:0] id; input reset_mode; input acceptance_filter_mode; input extended_mode; input [7:0] acceptance_code_0; input [7:0] acceptance_code_1; input [7:0] acceptance_code_2; input [7:0] acceptance_code_3; input [7:0] acceptance_mask_0; input [7:0] acceptance_mask_1; input [7:0] acceptance_mask_2; input [7:0] acceptance_mask_3; input go_rx_crc_lim; input go_rx_inter; input go_error_frame; input [7:0] data0; input [7:0] data1; input rtr1; input rtr2; input ide; input no_byte0; input no_byte1; output id_ok; reg id_ok; wire match; wire match_sf_std; wire match_sf_ext; wire match_df_std; wire match_df_ext; assign match = ( (id[3] == acceptance_code_0[0] | acceptance_mask_0[0] ) & (id[4] == acceptance_code_0[1] | acceptance_mask_0[1] ) & (id[5] == acceptance_code_0[2] | acceptance_mask_0[2] ) & (id[6] == acceptance_code_0[3] | acceptance_mask_0[3] ) & (id[7] == acceptance_code_0[4] | acceptance_mask_0[4] ) & (id[8] == acceptance_code_0[5] | acceptance_mask_0[5] ) & (id[9] == acceptance_code_0[6] | acceptance_mask_0[6] ) & (id[10] == acceptance_code_0[7] | acceptance_mask_0[7] ) ); assign match_sf_std = ( (id[3] == acceptance_code_0[0] | acceptance_mask_0[0] ) & (id[4] == acceptance_code_0[1] | acceptance_mask_0[1] ) & (id[5] == acceptance_code_0[2] | acceptance_mask_0[2] ) & (id[6] == acceptance_code_0[3] | acceptance_mask_0[3] ) & (id[7] == acceptance_code_0[4] | acceptance_mask_0[4] ) & (id[8] == acceptance_code_0[5] | acceptance_mask_0[5] ) & (id[9] == acceptance_code_0[6] | acceptance_mask_0[6] ) & (id[10] == acceptance_code_0[7] | acceptance_mask_0[7] ) & (rtr1 == acceptance_code_1[4] | acceptance_mask_1[4] ) & (id[0] == acceptance_code_1[5] | acceptance_mask_1[5] ) & (id[1] == acceptance_code_1[6] | acceptance_mask_1[6] ) & (id[2] == acceptance_code_1[7] | acceptance_mask_1[7] ) & (data0[0] == acceptance_code_2[0] | acceptance_mask_2[0] | no_byte0) & (data0[1] == acceptance_code_2[1] | acceptance_mask_2[1] | no_byte0) & (data0[2] == acceptance_code_2[2] | acceptance_mask_2[2] | no_byte0) & (data0[3] == acceptance_code_2[3] | acceptance_mask_2[3] | no_byte0) & (data0[4] == acceptance_code_2[4] | acceptance_mask_2[4] | no_byte0) & (data0[5] == acceptance_code_2[5] | acceptance_mask_2[5] | no_byte0) & (data0[6] == acceptance_code_2[6] | acceptance_mask_2[6] | no_byte0) & (data0[7] == acceptance_code_2[7] | acceptance_mask_2[7] | no_byte0) & (data1[0] == acceptance_code_3[0] | acceptance_mask_3[0] | no_byte1) & (data1[1] == acceptance_code_3[1] | acceptance_mask_3[1] | no_byte1) & (data1[2] == acceptance_code_3[2] | acceptance_mask_3[2] | no_byte1) & (data1[3] == acceptance_code_3[3] | acceptance_mask_3[3] | no_byte1) & (data1[4] == acceptance_code_3[4] | acceptance_mask_3[4] | no_byte1) & (data1[5] == acceptance_code_3[5] | acceptance_mask_3[5] | no_byte1) & (data1[6] == acceptance_code_3[6] | acceptance_mask_3[6] | no_byte1) & (data1[7] == acceptance_code_3[7] | acceptance_mask_3[7] | no_byte1) ); assign match_sf_ext = ( (id[21] == acceptance_code_0[0] | acceptance_mask_0[0] ) & (id[22] == acceptance_code_0[1] | acceptance_mask_0[1] ) & (id[23] == acceptance_code_0[2] | acceptance_mask_0[2] ) & (id[24] == acceptance_code_0[3] | acceptance_mask_0[3] ) & (id[25] == acceptance_code_0[4] | acceptance_mask_0[4] ) & (id[26] == acceptance_code_0[5] | acceptance_mask_0[5] ) & (id[27] == acceptance_code_0[6] | acceptance_mask_0[6] ) & (id[28] == acceptance_code_0[7] | acceptance_mask_0[7] ) & (id[13] == acceptance_code_1[0] | acceptance_mask_1[0] ) & (id[14] == acceptance_code_1[1] | acceptance_mask_1[1] ) & (id[15] == acceptance_code_1[2] | acceptance_mask_1[2] ) & (id[16] == acceptance_code_1[3] | acceptance_mask_1[3] ) & (id[17] == acceptance_code_1[4] | acceptance_mask_1[4] ) & (id[18] == acceptance_code_1[5] | acceptance_mask_1[5] ) & (id[19] == acceptance_code_1[6] | acceptance_mask_1[6] ) & (id[20] == acceptance_code_1[7] | acceptance_mask_1[7] ) & (id[5] == acceptance_code_2[0] | acceptance_mask_2[0] ) & (id[6] == acceptance_code_2[1] | acceptance_mask_2[1] ) & (id[7] == acceptance_code_2[2] | acceptance_mask_2[2] ) & (id[8] == acceptance_code_2[3] | acceptance_mask_2[3] ) & (id[9] == acceptance_code_2[4] | acceptance_mask_2[4] ) & (id[10] == acceptance_code_2[5] | acceptance_mask_2[5] ) & (id[11] == acceptance_code_2[6] | acceptance_mask_2[6] ) & (id[12] == acceptance_code_2[7] | acceptance_mask_2[7] ) & (rtr2 == acceptance_code_3[2] | acceptance_mask_3[2] ) & (id[0] == acceptance_code_3[3] | acceptance_mask_3[3] ) & (id[1] == acceptance_code_3[4] | acceptance_mask_3[4] ) & (id[2] == acceptance_code_3[5] | acceptance_mask_3[5] ) & (id[3] == acceptance_code_3[6] | acceptance_mask_3[6] ) & (id[4] == acceptance_code_3[7] | acceptance_mask_3[7] ) ); assign match_df_std = (((id[3] == acceptance_code_0[0] | acceptance_mask_0[0] ) & (id[4] == acceptance_code_0[1] | acceptance_mask_0[1] ) & (id[5] == acceptance_code_0[2] | acceptance_mask_0[2] ) & (id[6] == acceptance_code_0[3] | acceptance_mask_0[3] ) & (id[7] == acceptance_code_0[4] | acceptance_mask_0[4] ) & (id[8] == acceptance_code_0[5] | acceptance_mask_0[5] ) & (id[9] == acceptance_code_0[6] | acceptance_mask_0[6] ) & (id[10] == acceptance_code_0[7] | acceptance_mask_0[7] ) & (rtr1 == acceptance_code_1[4] | acceptance_mask_1[4] ) & (id[0] == acceptance_code_1[5] | acceptance_mask_1[5] ) & (id[1] == acceptance_code_1[6] | acceptance_mask_1[6] ) & (id[2] == acceptance_code_1[7] | acceptance_mask_1[7] ) & (data0[0] == acceptance_code_3[0] | acceptance_mask_3[0] | no_byte0) & (data0[1] == acceptance_code_3[1] | acceptance_mask_3[1] | no_byte0) & (data0[2] == acceptance_code_3[2] | acceptance_mask_3[2] | no_byte0) & (data0[3] == acceptance_code_3[3] | acceptance_mask_3[3] | no_byte0) & (data0[4] == acceptance_code_1[0] | acceptance_mask_1[0] | no_byte0) & (data0[5] == acceptance_code_1[1] | acceptance_mask_1[1] | no_byte0) & (data0[6] == acceptance_code_1[2] | acceptance_mask_1[2] | no_byte0) & (data0[7] == acceptance_code_1[3] | acceptance_mask_1[3] | no_byte0) ) | ((id[3] == acceptance_code_2[0] | acceptance_mask_2[0] ) & (id[4] == acceptance_code_2[1] | acceptance_mask_2[1] ) & (id[5] == acceptance_code_2[2] | acceptance_mask_2[2] ) & (id[6] == acceptance_code_2[3] | acceptance_mask_2[3] ) & (id[7] == acceptance_code_2[4] | acceptance_mask_2[4] ) & (id[8] == acceptance_code_2[5] | acceptance_mask_2[5] ) & (id[9] == acceptance_code_2[6] | acceptance_mask_2[6] ) & (id[10] == acceptance_code_2[7] | acceptance_mask_2[7] ) & (rtr1 == acceptance_code_3[4] | acceptance_mask_3[4] ) & (id[0] == acceptance_code_3[5] | acceptance_mask_3[5] ) & (id[1] == acceptance_code_3[6] | acceptance_mask_3[6] ) & (id[2] == acceptance_code_3[7] | acceptance_mask_3[7] ) ) ); assign match_df_ext = (((id[21] == acceptance_code_0[0] | acceptance_mask_0[0] ) & (id[22] == acceptance_code_0[1] | acceptance_mask_0[1] ) & (id[23] == acceptance_code_0[2] | acceptance_mask_0[2] ) & (id[24] == acceptance_code_0[3] | acceptance_mask_0[3] ) & (id[25] == acceptance_code_0[4] | acceptance_mask_0[4] ) & (id[26] == acceptance_code_0[5] | acceptance_mask_0[5] ) & (id[27] == acceptance_code_0[6] | acceptance_mask_0[6] ) & (id[28] == acceptance_code_0[7] | acceptance_mask_0[7] ) & (id[13] == acceptance_code_1[0] | acceptance_mask_1[0] ) & (id[14] == acceptance_code_1[1] | acceptance_mask_1[1] ) & (id[15] == acceptance_code_1[2] | acceptance_mask_1[2] ) & (id[16] == acceptance_code_1[3] | acceptance_mask_1[3] ) & (id[17] == acceptance_code_1[4] | acceptance_mask_1[4] ) & (id[18] == acceptance_code_1[5] | acceptance_mask_1[5] ) & (id[19] == acceptance_code_1[6] | acceptance_mask_1[6] ) & (id[20] == acceptance_code_1[7] | acceptance_mask_1[7] ) ) | ((id[21] == acceptance_code_2[0] | acceptance_mask_2[0] ) & (id[22] == acceptance_code_2[1] | acceptance_mask_2[1] ) & (id[23] == acceptance_code_2[2] | acceptance_mask_2[2] ) & (id[24] == acceptance_code_2[3] | acceptance_mask_2[3] ) & (id[25] == acceptance_code_2[4] | acceptance_mask_2[4] ) & (id[26] == acceptance_code_2[5] | acceptance_mask_2[5] ) & (id[27] == acceptance_code_2[6] | acceptance_mask_2[6] ) & (id[28] == acceptance_code_2[7] | acceptance_mask_2[7] ) & (id[13] == acceptance_code_3[0] | acceptance_mask_3[0] ) & (id[14] == acceptance_code_3[1] | acceptance_mask_3[1] ) & (id[15] == acceptance_code_3[2] | acceptance_mask_3[2] ) & (id[16] == acceptance_code_3[3] | acceptance_mask_3[3] ) & (id[17] == acceptance_code_3[4] | acceptance_mask_3[4] ) & (id[18] == acceptance_code_3[5] | acceptance_mask_3[5] ) & (id[19] == acceptance_code_3[6] | acceptance_mask_3[6] ) & (id[20] == acceptance_code_3[7] | acceptance_mask_3[7] ) ) ); always @ (posedge clk or posedge rst) begin if (rst) id_ok <= 1'b0; else if (go_rx_crc_lim) begin if (extended_mode) begin if (~acceptance_filter_mode) begin if (ide) id_ok <=#Tp match_df_ext; else id_ok <=#Tp match_df_std; end else begin if (ide) id_ok <=#Tp match_sf_ext; else id_ok <=#Tp match_sf_std; end end else id_ok <=#Tp match; end else if (reset_mode | go_rx_inter | go_error_frame) id_ok <=#Tp 1'b0; end endmodule"
    },
    {
        "file_name": "eth_fifo.v",
        "verilog_design": "`include \"ethmac_defines.v\" `include \"timescale.v\" module eth_fifo (data_in, data_out, clk, reset, write, read, clear, almost_full, full, almost_empty, empty, cnt); parameter DATA_WIDTH = 32; parameter DEPTH = 8; parameter CNT_WIDTH = 4; input clk; input reset; input write; input read; input clear; input [DATA_WIDTH-1:0] data_in; output [DATA_WIDTH-1:0] data_out; output almost_full; output full; output almost_empty; output empty; output [CNT_WIDTH-1:0] cnt; `ifdef ETH_FIFO_XILINX `else `ifdef ETH_ALTERA_ALTSYNCRAM `else reg [DATA_WIDTH-1:0] fifo [0:DEPTH-1]; reg [DATA_WIDTH-1:0] data_out; `endif `endif reg [CNT_WIDTH-1:0] cnt; reg [CNT_WIDTH-2:0] read_pointer; reg [CNT_WIDTH-2:0] write_pointer; always @ (posedge clk or posedge reset) begin if(reset) cnt <= 0; else if(clear) cnt <= { {(CNT_WIDTH-1){1'b0}}, read^write}; else if(read ^ write) if(read) cnt <= cnt - 1; else cnt <= cnt + 1; end always @ (posedge clk or posedge reset) begin if(reset) read_pointer <= 0; else if(clear) read_pointer <= { {(CNT_WIDTH-2){1'b0}}, read}; else if(read & ~empty) read_pointer <= read_pointer + 1'b1; end always @ (posedge clk or posedge reset) begin if(reset) write_pointer <= 0; else if(clear) write_pointer <= { {(CNT_WIDTH-2){1'b0}}, write}; else if(write & ~full) write_pointer <= write_pointer + 1'b1; end assign empty = ~(|cnt); assign almost_empty = cnt == 1; assign full = cnt == DEPTH; assign almost_full = &cnt[CNT_WIDTH-2:0]; `ifdef ETH_FIFO_XILINX xilinx_dist_ram_16x32 fifo ( .data_out(data_out), .we(write & ~full), .data_in(data_in), .read_address( clear ? {CNT_WIDTH-1{1'b0}} : read_pointer), .write_address(clear ? {CNT_WIDTH-1{1'b0}} : write_pointer), .wclk(clk) ); `else `ifdef ETH_ALTERA_ALTSYNCRAM altera_dpram_16x32 altera_dpram_16x32_inst ( .data (data_in), .wren (write & ~full), .wraddress (clear ? {CNT_WIDTH-1{1'b0}} : write_pointer), .rdaddress (clear ? {CNT_WIDTH-1{1'b0}} : read_pointer ), .clock (clk), .q (data_out) ); `else always @ (posedge clk) begin if(write & clear) fifo[0] <= data_in; else if(write & ~full) fifo[write_pointer] <= data_in; end always @ (posedge clk) begin if(clear) data_out <= fifo[0]; else data_out <= fifo[read_pointer]; end `endif `endif endmodule"
    },
    {
        "file_name": "Phy_int.v",
        "verilog_design": "module Phy_int ( Reset , MAC_rx_clk , MAC_tx_clk , MCrs_dv , MRxD , MRxErr , MTxD , MTxEn , MCRS , Tx_er , Tx_en , Txd , Rx_er , Rx_dv , Rxd , Crs , Col , Line_loop_en , Speed ); input Reset ; input MAC_rx_clk ; input MAC_tx_clk ; output MCrs_dv ; output [7:0] MRxD ; output MRxErr ; input [7:0] MTxD ; input MTxEn ; output MCRS ; output Tx_er ; output Tx_en ; output [7:0] Txd ; input Rx_er ; input Rx_dv ; input [7:0] Rxd ; input Crs ; input Col ; input Line_loop_en ; input [2:0] Speed ; reg [7:0] MTxD_dl1 ; reg MTxEn_dl1 ; reg Tx_odd_data_ptr ; reg Rx_odd_data_ptr ; reg Tx_en ; reg [7:0] Txd ; reg MCrs_dv ; reg [7:0] MRxD ; reg Rx_er_dl1 ; reg Rx_dv_dl1 ; reg Rx_dv_dl2 ; reg [7:0] Rxd_dl1 ; reg [7:0] Rxd_dl2 ; reg Crs_dl1 ; reg Col_dl1 ; always @ (posedge MAC_tx_clk or posedge Reset) if (Reset) begin MTxD_dl1 <=0; MTxEn_dl1 <=0; end else begin MTxD_dl1 <=MTxD ; MTxEn_dl1 <=MTxEn ; end always @ (posedge MAC_tx_clk or posedge Reset) if (Reset) Tx_odd_data_ptr <=0; else if (!MTxD_dl1) Tx_odd_data_ptr <=0; else Tx_odd_data_ptr <=!Tx_odd_data_ptr; always @ (posedge MAC_tx_clk or posedge Reset) if (Reset) Txd <=0; else if(Speed[2]&&MTxEn_dl1) Txd <=MTxD_dl1; else if(MTxEn_dl1&&!Tx_odd_data_ptr) Txd <={4'b0,MTxD_dl1[3:0]}; else if(MTxEn_dl1&&Tx_odd_data_ptr) Txd <={4'b0,MTxD_dl1[7:4]}; else Txd <=0; always @ (posedge MAC_tx_clk or posedge Reset) if (Reset) Tx_en <=0; else if(MTxEn_dl1) Tx_en <=1; else Tx_en <=0; assign Tx_er=0; always @ (posedge MAC_rx_clk or posedge Reset) if (Reset) begin Rx_er_dl1 <=0; Rx_dv_dl1 <=0; Rx_dv_dl2 <=0 ; Rxd_dl1 <=0; Rxd_dl2 <=0; Crs_dl1 <=0; Col_dl1 <=0; end else begin Rx_er_dl1 <=Rx_er ; Rx_dv_dl1 <=Rx_dv ; Rx_dv_dl2 <=Rx_dv_dl1 ; Rxd_dl1 <=Rxd ; Rxd_dl2 <=Rxd_dl1 ; Crs_dl1 <=Crs ; Col_dl1 <=Col ; end assign MRxErr =Rx_er_dl1 ; assign MCRS =Crs_dl1 ; always @ (posedge MAC_rx_clk or posedge Reset) if (Reset) MCrs_dv <=0; else if(Line_loop_en) MCrs_dv <=Tx_en; else if(Rx_dv_dl2) MCrs_dv <=1; else MCrs_dv <=0; always @ (posedge MAC_rx_clk or posedge Reset) if (Reset) Rx_odd_data_ptr <=0; else if (!Rx_dv_dl1) Rx_odd_data_ptr <=0; else Rx_odd_data_ptr <=!Rx_odd_data_ptr; always @ (posedge MAC_rx_clk or posedge Reset) if (Reset) MRxD <=0; else if(Line_loop_en) MRxD <=Txd; else if(Speed[2]&&Rx_dv_dl2) MRxD <=Rxd_dl2; else if(Rx_dv_dl1&&Rx_odd_data_ptr) MRxD <={Rxd_dl1[3:0],Rxd_dl2[3:0]}; endmodule"
    },
    {
        "file_name": "fpu_add.v",
        "verilog_design": "`timescale 1ns / 100ps module fpu_add( clk, rst, enable, opa, opb, sign, sum_2, exponent_2); input clk; input rst; input enable; input [63:0] opa, opb; output sign; output [55:0] sum_2; output [10:0] exponent_2; reg sign; reg [10:0] exponent_a; reg [10:0] exponent_b; reg [51:0] mantissa_a; reg [51:0] mantissa_b; reg expa_gt_expb; reg [10:0] exponent_small; reg [10:0] exponent_large; reg [51:0] mantissa_small; reg [51:0] mantissa_large; reg small_is_denorm; reg large_is_denorm; reg large_norm_small_denorm; reg [10:0] exponent_diff; reg [55:0] large_add; reg [55:0] small_add; reg [55:0] small_shift; wire small_shift_nonzero = |small_shift[55:0]; wire small_is_nonzero = (exponent_small > 0) | |mantissa_small[51:0]; wire small_fraction_enable = small_is_nonzero & !small_shift_nonzero; wire [55:0] small_shift_2 = { 55'b0, 1'b1 }; reg [55:0] small_shift_3; reg [55:0] sum; wire sum_overflow = sum[55]; reg [55:0] sum_2; reg [10:0] exponent; wire sum_leading_one = sum_2[54]; reg denorm_to_norm; reg [10:0] exponent_2; always @(posedge clk) begin if (rst) begin sign <= 0; exponent_a <= 0; exponent_b <= 0; mantissa_a <= 0; mantissa_b <= 0; expa_gt_expb <= 0; exponent_small <= 0; exponent_large <= 0; mantissa_small <= 0; mantissa_large <= 0; small_is_denorm <= 0; large_is_denorm <= 0; large_norm_small_denorm <= 0; exponent_diff <= 0; large_add <= 0; small_add <= 0; small_shift <= 0; small_shift_3 <= 0; sum <= 0; sum_2 <= 0; exponent <= 0; denorm_to_norm <= 0; exponent_2 <= 0; end else if (enable) begin sign <= opa[63]; exponent_a <= opa[62:52]; exponent_b <= opb[62:52]; mantissa_a <= opa[51:0]; mantissa_b <= opb[51:0]; expa_gt_expb <= exponent_a > exponent_b; exponent_small <= expa_gt_expb ? exponent_b : exponent_a; exponent_large <= expa_gt_expb ? exponent_a : exponent_b; mantissa_small <= expa_gt_expb ? mantissa_b : mantissa_a; mantissa_large <= expa_gt_expb ? mantissa_a : mantissa_b; small_is_denorm <= !(exponent_small > 0); large_is_denorm <= !(exponent_large > 0); large_norm_small_denorm <= (small_is_denorm && !large_is_denorm); exponent_diff <= exponent_large - exponent_small - large_norm_small_denorm; large_add <= { 1'b0, !large_is_denorm, mantissa_large, 2'b0 }; small_add <= { 1'b0, !small_is_denorm, mantissa_small, 2'b0 }; small_shift <= small_add >> exponent_diff; small_shift_3 <= small_fraction_enable ? small_shift_2 : small_shift; sum <= large_add + small_shift_3; sum_2 <= sum_overflow ? sum >> 1 : sum; exponent <= sum_overflow ? exponent_large + 1: exponent_large; denorm_to_norm <= sum_leading_one & large_is_denorm; exponent_2 <= denorm_to_norm ? exponent + 1 : exponent; end end endmodule"
    },
    {
        "file_name": "control_unit.v",
        "verilog_design": "module control_unit ( output reg [ 2:0] sbox_sel, output reg [ 1:0] rk_sel, output reg [ 1:0] key_out_sel, output reg [ 1:0] col_sel, output reg [ 3:0] key_en, output reg [ 3:0] col_en, output [ 3:0] round, output reg bypass_rk, output reg bypass_key_en, output reg key_sel, output reg iv_cnt_en, output reg iv_cnt_sel, output reg key_derivation_en, output end_comp, output key_init, output key_gen, output mode_ctr, output mode_cbc, output last_round, output encrypt_decrypt, input [1:0] operation_mode, input [1:0] aes_mode, input start, input disable_core, input clk, input rst_n ); localparam AES_CR = 4'd00; localparam AES_SR = 4'd01; localparam AES_DINR = 4'd02; localparam AES_DOUTR = 4'd03; localparam AES_KEYR0 = 4'd04; localparam AES_KEYR1 = 4'd05; localparam AES_KEYR2 = 4'd06; localparam AES_KEYR3 = 4'd07; localparam AES_IVR0 = 4'd08; localparam AES_IVR1 = 4'd09; localparam AES_IVR2 = 4'd10; localparam AES_IVR3 = 4'd11; localparam ENCRYPTION = 2'b00; localparam KEY_DERIVATION = 2'b01; localparam DECRYPTION = 2'b10; localparam DECRYP_W_DERIV = 2'b11; localparam ECB = 2'b00; localparam CBC = 2'b01; localparam CTR = 2'b10; localparam COL_0 = 3'b000; localparam COL_1 = 3'b001; localparam COL_2 = 3'b010; localparam COL_3 = 3'b011; localparam G_FUNCTION = 3'b100; localparam COL = 2'b00; localparam MIXCOL_IN = 2'b01; localparam MIXCOL_OUT = 2'b10; localparam KEY_0 = 2'b00; localparam KEY_1 = 2'b01; localparam KEY_2 = 2'b10; localparam KEY_3 = 2'b11; localparam SHIFT_ROWS = 2'b00; localparam ADD_RK_OUT = 2'b01; localparam INPUT = 2'b10; localparam KEY_HOST = 1'b0; localparam KEY_OUT = 1'b1; localparam KEY_DIS = 4'b0000; localparam EN_KEY_0 = 4'b0001; localparam EN_KEY_1 = 4'b0010; localparam EN_KEY_2 = 4'b0100; localparam EN_KEY_3 = 4'b1000; localparam KEY_ALL = 4'b1111; localparam COL_DIS = 4'b0000; localparam EN_COL_0 = 4'b0001; localparam EN_COL_1 = 4'b0010; localparam EN_COL_2 = 4'b0100; localparam EN_COL_3 = 4'b1000; localparam COL_ALL = 4'b1111; localparam IV_CNT = 1'b1; localparam IV_BUS = 1'b0; localparam ENABLE = 1'b1; localparam DISABLE = 1'b0; localparam NUMBER_ROUND = 4'd10; localparam NUMBER_ROUND_INC = 4'd11; localparam INITIAL_ROUND = 4'd00; localparam IDLE = 4'd00; localparam ROUND0_COL0 = 4'd01; localparam ROUND0_COL1 = 4'd02; localparam ROUND0_COL2 = 4'd03; localparam ROUND0_COL3 = 4'd04; localparam ROUND_KEY0 = 4'd05; localparam ROUND_COL0 = 4'd06; localparam ROUND_COL1 = 4'd07; localparam ROUND_COL2 = 4'd08; localparam ROUND_COL3 = 4'd09; localparam READY = 4'd10; localparam GEN_KEY0 = 4'd11; localparam GEN_KEY1 = 4'd12; localparam GEN_KEY2 = 4'd13; localparam GEN_KEY3 = 4'd14; localparam NOP = 4'd15; reg [3:0] state, next_state; reg [3:0] rd_count; reg rd_count_en; wire op_key_derivation; wire first_round; wire [1:0] op_mode; wire enc_dec; always @(posedge clk or negedge rst_n) begin if(!rst_n) state <= IDLE; else if(disable_core) state <= IDLE; else state <= next_state; end assign encrypt_decrypt = (op_mode == ENCRYPTION || op_mode == KEY_DERIVATION || state == GEN_KEY0 || state == GEN_KEY1 ||state == GEN_KEY2 || state == GEN_KEY3 ); assign enc_dec = encrypt_decrypt | mode_ctr; assign key_gen = (state == ROUND_KEY0); assign op_key_derivation = (op_mode == KEY_DERIVATION); assign mode_ctr = (aes_mode == CTR); assign mode_cbc = (aes_mode == CBC); assign key_init = start; assign op_mode = (mode_ctr) ? ENCRYPTION : operation_mode; always @(*) begin next_state = state; case(state) IDLE: begin if(!start) next_state = IDLE; else case(op_mode) ENCRYPTION : next_state = ROUND0_COL0; DECRYPTION : next_state = ROUND0_COL3; KEY_DERIVATION: next_state = GEN_KEY0; DECRYP_W_DERIV: next_state = GEN_KEY0; default : next_state = IDLE; endcase end ROUND0_COL0: begin next_state = (enc_dec) ? ROUND0_COL1 : ROUND_KEY0; end ROUND0_COL1: begin next_state = (enc_dec) ? ROUND0_COL2 : ROUND0_COL0; end ROUND0_COL2: begin next_state = (enc_dec) ? ROUND0_COL3 : ROUND0_COL1; end ROUND0_COL3: begin next_state = (enc_dec) ? ROUND_KEY0 : ROUND0_COL2; end ROUND_KEY0 : begin if(!first_round) begin next_state = (last_round) ? READY : NOP; end else begin next_state = (enc_dec) ? ROUND_COL0 : ROUND_COL3; end end NOP : begin next_state = (enc_dec) ? ROUND_COL0 : ROUND_COL3; end ROUND_COL0 : begin next_state = (enc_dec) ? ROUND_COL1 : ROUND_KEY0; end ROUND_COL1 : begin next_state = (enc_dec) ? ROUND_COL2 : ROUND_COL0; end ROUND_COL2 : begin next_state = (enc_dec) ? ROUND_COL3 : ROUND_COL1; end ROUND_COL3 : begin if(last_round && enc_dec) next_state = READY; else next_state = (enc_dec) ? ROUND_KEY0 : ROUND_COL2; end GEN_KEY0 : begin next_state = GEN_KEY1; end GEN_KEY1 : begin next_state = GEN_KEY2; end GEN_KEY2 : begin next_state = GEN_KEY3; end GEN_KEY3 : begin if(last_round) next_state = (op_key_derivation) ? READY : ROUND0_COL3; else next_state = GEN_KEY0; end READY : begin next_state = IDLE; end endcase end assign end_comp = (state == READY)?ENABLE:DISABLE; always @(*) begin sbox_sel = COL_0; rk_sel = COL; bypass_rk = DISABLE; key_out_sel = KEY_0; col_sel = INPUT; key_sel = KEY_HOST; key_en = KEY_DIS; col_en = COL_DIS; rd_count_en = DISABLE; iv_cnt_en = DISABLE; iv_cnt_sel = IV_BUS; bypass_key_en = DISABLE; key_derivation_en = DISABLE; case(state) ROUND0_COL0: begin sbox_sel = COL_0; rk_sel = COL; bypass_rk = ENABLE; bypass_key_en = ENABLE; key_out_sel = KEY_0; col_sel = (enc_dec) ? ADD_RK_OUT : SHIFT_ROWS; col_en = (enc_dec) ? EN_COL_0 : COL_ALL; end ROUND0_COL1: begin sbox_sel = COL_1; rk_sel = COL; bypass_rk = ENABLE; bypass_key_en = ENABLE; key_out_sel = KEY_1; col_sel = ADD_RK_OUT; col_en = EN_COL_1; if(!enc_dec) begin key_sel = KEY_OUT; key_en = EN_KEY_1; end end ROUND0_COL2: begin sbox_sel = COL_2; rk_sel = COL; bypass_rk = ENABLE; bypass_key_en = ENABLE; key_out_sel = KEY_2; col_sel = ADD_RK_OUT; col_en = EN_COL_2; if(!enc_dec) begin key_sel = KEY_OUT; key_en = EN_KEY_2; end end ROUND0_COL3: begin sbox_sel = COL_3; rk_sel = COL; bypass_key_en = ENABLE; key_out_sel = KEY_3; col_sel = (enc_dec) ? SHIFT_ROWS : ADD_RK_OUT; col_en = (enc_dec) ? COL_ALL : EN_COL_3; bypass_rk = ENABLE; if(!enc_dec) begin key_sel = KEY_OUT; key_en = EN_KEY_3; end end ROUND_KEY0: begin sbox_sel = G_FUNCTION; key_sel = KEY_OUT; key_en = EN_KEY_0; rd_count_en = ENABLE; end ROUND_COL0: begin sbox_sel = COL_0; rk_sel = (last_round) ? MIXCOL_IN : MIXCOL_OUT; key_out_sel = KEY_0; key_sel = KEY_OUT; if(enc_dec) key_en = EN_KEY_1; if((mode_cbc && last_round && !enc_dec) || (mode_ctr && last_round)) col_sel = INPUT; else begin if(!enc_dec) col_sel = (last_round) ? ADD_RK_OUT : SHIFT_ROWS; else col_sel = ADD_RK_OUT; end if(enc_dec) col_en = EN_COL_0; else col_en = (last_round) ? EN_COL_0 : COL_ALL; end ROUND_COL1: begin sbox_sel = COL_1; rk_sel = (last_round) ? MIXCOL_IN : MIXCOL_OUT; key_out_sel = KEY_1; key_sel = KEY_OUT; if(enc_dec) key_en = EN_KEY_2; else key_en = EN_KEY_1; if((mode_cbc && last_round && !enc_dec) || (mode_ctr && last_round)) col_sel = INPUT; else col_sel = ADD_RK_OUT; col_en = EN_COL_1; end ROUND_COL2: begin sbox_sel = COL_2; rk_sel = (last_round) ? MIXCOL_IN : MIXCOL_OUT; key_out_sel = KEY_2; key_sel = KEY_OUT; if(enc_dec) key_en = EN_KEY_3; else key_en = EN_KEY_2; if((mode_cbc && last_round && !enc_dec) || (mode_ctr && last_round)) col_sel = INPUT; else col_sel = ADD_RK_OUT; col_en = EN_COL_2; end ROUND_COL3: begin sbox_sel = COL_3; rk_sel = (last_round) ? MIXCOL_IN : MIXCOL_OUT; key_out_sel = KEY_3; key_sel = KEY_OUT; if(!enc_dec) key_en = EN_KEY_3; if((mode_cbc && last_round && !enc_dec) || (mode_ctr && last_round)) col_sel = INPUT; else begin if(enc_dec) col_sel = (last_round) ? ADD_RK_OUT : SHIFT_ROWS; else col_sel = ADD_RK_OUT; end if(enc_dec) col_en = (last_round) ? EN_COL_3 : COL_ALL; else col_en = EN_COL_3; if(mode_ctr && last_round) begin iv_cnt_en = ENABLE; iv_cnt_sel = IV_CNT; end end GEN_KEY0: begin sbox_sel = G_FUNCTION; rd_count_en = ENABLE; end GEN_KEY1: begin key_en = EN_KEY_1 | EN_KEY_0; key_sel = KEY_OUT; bypass_key_en = ENABLE; end GEN_KEY2: begin key_en = EN_KEY_2; key_sel = KEY_OUT; bypass_key_en = ENABLE; end GEN_KEY3: begin key_en = EN_KEY_3; key_sel = KEY_OUT; bypass_key_en = ENABLE; end READY: begin if(op_mode == KEY_DERIVATION) key_derivation_en = ENABLE; end endcase end always @(posedge clk or negedge rst_n) begin if(!rst_n) rd_count <= INITIAL_ROUND; else if(state == IDLE || (state == GEN_KEY3 && last_round)) rd_count <= INITIAL_ROUND; else if(rd_count_en) rd_count <= rd_count + 1'b1; end assign round = rd_count; assign first_round = (rd_count == INITIAL_ROUND); assign last_round = (rd_count == NUMBER_ROUND || rd_count == NUMBER_ROUND_INC); endmodule"
    },
    {
        "file_name": "phasecomparator.v",
        "verilog_design": "module phasecomparator(InputSignal, OutputSignal, MainClock, Lead, Lag); input InputSignal, OutputSignal; input MainClock; output Lead, Lag; reg [1:0] InputSignalEdgeDet; always @(posedge MainClock) begin InputSignalEdgeDet <= { InputSignalEdgeDet[0], InputSignal }; end wire InputSignalEdge = (InputSignalEdgeDet == 2'b01); reg Lead, Lag; always @(posedge MainClock) begin Lag <= ((InputSignalEdge == 1'b1) && (OutputSignal == 1'b0)); Lead <= ((InputSignalEdge == 1'b1) && (OutputSignal == 1'b1)); end endmodule"
    }
]
