digraph "compose( ,  )" {
	node [label="\N"];
	"442:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f02eaa9bfd0>",
		fillcolor=turquoise,
		label="442:BL
Areg <= A;
Breg <= B;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaac050>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f02eaaac190>]",
		style=filled,
		typ=Block];
	"Leaf_427:AL"	 [def_var="['Areg', 'Breg', 'Yreg', 'Zreg', 'Vreg', 'Creg']",
		label="Leaf_427:AL"];
	"442:BL" -> "Leaf_427:AL"	 [cond="[]",
		lineno=None];
	"403:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaaa1610>",
		def_var="['shifter_direction']",
		fillcolor=deepskyblue,
		label="403:AS
shifter_direction = (sr_AB)? 'b1 : 'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['sr_AB']"];
	"389:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaaab690>",
		def_var="['adderORsel']",
		fillcolor=deepskyblue,
		label="389:AS
adderORsel = (or_AB)? 'b1 : 'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['or_AB']"];
	"364:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaab26d0>",
		def_var="['Y']",
		fillcolor=deepskyblue,
		label="364:AS
Y = Yreg;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Yreg']"];
	"393:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaaab910>",
		def_var="['adderXORsel']",
		fillcolor=deepskyblue,
		label="393:AS
adderXORsel = (xor_AB || cmp_AB)? 'b0 : 'b1;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['xor_AB', 'cmp_AB']"];
	"379:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa9ce50>",
		def_var="['carry_in']",
		fillcolor=deepskyblue,
		label="379:AS
carry_in = (sub_AB || inc_A || inc_B)? 1'b1 : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['sub_AB', 'inc_A', 'inc_B']"];
	"428:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f02eaa9b550>",
		fillcolor=turquoise,
		label="428:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"429:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f02eaa9bcd0>",
		fillcolor=springgreen,
		label="429:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"428:BL" -> "429:IF"	 [cond="[]",
		lineno=None];
	"406:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaaa1890>",
		def_var="['shifter_inB']",
		fillcolor=deepskyblue,
		label="406:AS
shifter_inB = Breg;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Breg']"];
	"430:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f02eaa9bb90>",
		fillcolor=turquoise,
		label="430:BL
Areg <= 'd0;
Breg <= 'd0;
Yreg <= 'd0;
Zreg <= 'b1;
Creg <= 'b0;
Vreg <= 'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaa9b6d0>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f02eaa9b810>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaa9b950>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7f02eaa9ba90>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaa9bbd0>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7f02eaa9bd10>]",
		style=filled,
		typ=Block];
	"429:IF" -> "430:BL"	 [cond="['reset']",
		label=reset,
		lineno=429];
	"440:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f02eaaac1d0>",
		fillcolor=turquoise,
		label="440:BL
Creg <= carry;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaab62d0>]",
		style=filled,
		typ=Block];
	"429:IF" -> "440:BL"	 [cond="['reset']",
		label="!(reset)",
		lineno=429];
	"384:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaaab390>",
		def_var="['alu_out']",
		fillcolor=deepskyblue,
		label="384:AS
alu_out = ((and_AB || or_AB) && (!sl_AB && !sr_AB))? carry_out[ALU_WIDTH:1] : 
(sl_AB || sr_AB)? shifter_out : adder_out;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['and_AB', 'or_AB', 'sl_AB', 'sr_AB', 'carry_out', 'sl_AB', 'sr_AB', 'shifter_out', 'adder_out']"];
	"427:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f02eaa9b510>",
		clk_sens=False,
		fillcolor=gold,
		label="427:AL",
		sens="['clk', 'reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['reset', 'A', 'B', 'clr_Z', 'clr_V', 'alu_out', 'clr_C', 'carry', 'load_inputs', 'clr', 'load_outputs']"];
	"384:AS" -> "427:AL";
	"370:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaab2c90>",
		def_var="['adder_in_a']",
		fillcolor=deepskyblue,
		label="370:AS
adder_in_a = (cpl_B)? 'd0 : 
(cpl_A)? ~Areg : 
(inc_B)? 1'b0 : 
(dec_B)? { ALU_WIDTH{ 1'b1 } } : Areg;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['cpl_B', 'cpl_A', 'Areg', 'inc_B', 'dec_B', 'Areg']"];
	"461:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f02eaaac910>",
		fillcolor=springgreen,
		label="461:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"462:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaacb10>",
		fillcolor=firebrick,
		label="462:NS
Zreg <= 'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaacb10>]",
		style=filled,
		typ=NonblockingSubstitution];
	"461:IF" -> "462:NS"	 [cond="['clr_Z']",
		label=clr_Z,
		lineno=461];
	"462:NS" -> "Leaf_427:AL"	 [cond="[]",
		lineno=None];
	"446:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f02eaaac250>",
		fillcolor=springgreen,
		label="446:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"447:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaac390>",
		fillcolor=firebrick,
		label="447:NS
Yreg <= alu_out;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaac390>]",
		style=filled,
		typ=NonblockingSubstitution];
	"446:IF" -> "447:NS"	 [cond="['load_outputs']",
		label=load_outputs,
		lineno=446];
	"372:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa9c690>",
		def_var="['adder_in_b']",
		fillcolor=deepskyblue,
		label="372:AS
adder_in_b = (!sub_AB && !inc_A && !cpl_A && !cpl_B)? (dec_A)? { ALU_WIDTH{ 1'b1 } } : Breg : 
(sub_AB && !inc_A || cpl_B)? ~\
Breg : 
(!sub_AB && inc_A && !cpl_B)? 'd0 : 
(cpl_A)? 'd0 : adder_in_b;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['sub_AB', 'inc_A', 'cpl_A', 'cpl_B', 'dec_A', 'Breg', 'sub_AB', 'inc_A', 'cpl_B', 'Breg', 'sub_AB', 'inc_A', 'cpl_B', 'cpl_A', '\
adder_in_b']"];
	"372:AS" -> "372:AS";
	"472:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaab6290>",
		fillcolor=firebrick,
		label="472:NS
Zreg <= 'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaab6290>]",
		style=filled,
		typ=NonblockingSubstitution];
	"472:NS" -> "Leaf_427:AL"	 [cond="[]",
		lineno=None];
	"465:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f02eaaacd10>",
		fillcolor=springgreen,
		label="465:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"466:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaace90>",
		fillcolor=firebrick,
		label="466:NS
Vreg <= 'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaace90>]",
		style=filled,
		typ=NonblockingSubstitution];
	"465:IF" -> "466:NS"	 [cond="['clr_V']",
		label=clr_V,
		lineno=465];
	"470:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaab6110>",
		fillcolor=firebrick,
		label="470:NS
Zreg <= 'b1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaab6110>]",
		style=filled,
		typ=NonblockingSubstitution];
	"470:NS" -> "Leaf_427:AL"	 [cond="[]",
		lineno=None];
	"469:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f02eaab60d0>",
		fillcolor=springgreen,
		label="469:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"469:IF" -> "472:NS"	 [cond="['alu_out']",
		label="!((alu_out == 'd0))",
		lineno=469];
	"469:IF" -> "470:NS"	 [cond="['alu_out']",
		label="(alu_out == 'd0)",
		lineno=469];
	"361:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaab2590>",
		def_var="['logic0']",
		fillcolor=deepskyblue,
		label="361:AS
logic0 = 'd0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="[]"];
	"463:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f02eaaacb50>",
		fillcolor=springgreen,
		label="463:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"464:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaaccd0>",
		fillcolor=firebrick,
		label="464:NS
Creg <= 'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaaccd0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"463:IF" -> "464:NS"	 [cond="['clr_C']",
		label=clr_C,
		lineno=463];
	"367:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaab2a90>",
		def_var="['V']",
		fillcolor=deepskyblue,
		label="367:AS
V = Vreg;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Vreg']"];
	"430:BL" -> "Leaf_427:AL"	 [cond="[]",
		lineno=None];
	"440:BL" -> "461:IF"	 [cond="[]",
		lineno=None];
	"440:BL" -> "446:IF"	 [cond="[]",
		lineno=None];
	"440:BL" -> "465:IF"	 [cond="[]",
		lineno=None];
	"440:BL" -> "469:IF"	 [cond="[]",
		lineno=None];
	"440:BL" -> "463:IF"	 [cond="[]",
		lineno=None];
	"451:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f02eaaac3d0>",
		fillcolor=springgreen,
		label="451:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"440:BL" -> "451:IF"	 [cond="[]",
		lineno=None];
	"441:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f02eaa9bed0>",
		fillcolor=springgreen,
		label="441:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"440:BL" -> "441:IF"	 [cond="[]",
		lineno=None];
	"360:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaab2450>",
		def_var="['logic1']",
		fillcolor=deepskyblue,
		label="360:AS
logic1 = 'd1;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="[]"];
	"452:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f02eaaac7d0>",
		fillcolor=turquoise,
		label="452:BL
Areg <= 'd0;
Breg <= 'd0;
Yreg <= 'd0;
Creg <= 'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaac590>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f02eaaac6d0>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaac810>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7f02eaaac950>]",
		style=filled,
		typ=Block];
	"452:BL" -> "Leaf_427:AL"	 [cond="[]",
		lineno=None];
	"466:NS" -> "Leaf_427:AL"	 [cond="[]",
		lineno=None];
	"396:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaaabe50>",
		def_var="['carry']",
		fillcolor=deepskyblue,
		label="396:AS
carry = (add_AB && !and_AB && !or_AB && !xor_AB && !cpl_B && !clr)? carry_out[ALU_WIDTH] : 
(and_AB || or_AB || xor_AB || \
cpl_B || clr)? 'b0 : 
(sl_AB || sr_AB)? shifter_carry : carry;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['add_AB', 'and_AB', 'or_AB', 'xor_AB', 'cpl_B', 'clr', 'carry_out', 'and_AB', 'or_AB', 'xor_AB', 'cpl_B', 'clr', 'sl_AB', 'sr_AB', '\
shifter_carry', 'carry']"];
	"396:AS" -> "396:AS";
	"396:AS" -> "427:AL";
	"451:IF" -> "452:BL"	 [cond="['clr']",
		label=clr,
		lineno=451];
	"365:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaab2810>",
		def_var="['Z']",
		fillcolor=deepskyblue,
		label="365:AS
Z = Zreg;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Zreg']"];
	"464:NS" -> "Leaf_427:AL"	 [cond="[]",
		lineno=None];
	"447:NS" -> "Leaf_427:AL"	 [cond="[]",
		lineno=None];
	"366:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaab2950>",
		def_var="['C']",
		fillcolor=deepskyblue,
		label="366:AS
C = Creg;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Creg']"];
	"Leaf_427:AL" -> "364:AS";
	"Leaf_427:AL" -> "406:AS";
	"Leaf_427:AL" -> "370:AS";
	"Leaf_427:AL" -> "372:AS";
	"Leaf_427:AL" -> "367:AS";
	"Leaf_427:AL" -> "365:AS";
	"Leaf_427:AL" -> "366:AS";
	"405:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaaa1750>",
		def_var="['shifter_inA']",
		fillcolor=deepskyblue,
		label="405:AS
shifter_inA = Areg;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Areg']"];
	"Leaf_427:AL" -> "405:AS";
	"427:AL" -> "428:BL"	 [cond="[]",
		lineno=None];
	"441:IF" -> "442:BL"	 [cond="['load_inputs']",
		label=load_inputs,
		lineno=441];
}
