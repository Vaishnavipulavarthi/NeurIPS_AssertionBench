digraph "compose( ,  )" {
	node [label="\N"];
	"442:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f02eaa9bfd0>",
		fillcolor=turquoise,
		label="442:BL
Areg <= A;
Breg <= B;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaac050>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f02eaaac190>]",
		style=filled,
		typ=Block];
	"Leaf_427:AL"	 [def_var="['Areg', 'Breg', 'Yreg', 'Zreg', 'Vreg', 'Creg']",
		label="Leaf_427:AL"];
	"442:BL" -> "Leaf_427:AL"	 [cond="[]",
		lineno=None];
	"shifter.187:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f02ead2c2d0>",
		clk_sens=False,
		fillcolor=gold,
		label="shifter.187:AL",
		sens="['Xreg', 'Yreg', 'Yor']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="[]"];
	"shifter.188:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f02ead2c390>",
		fillcolor=turquoise,
		label="shifter.188:BL
Zreg = 'h0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f02ead2c350>]",
		style=filled,
		typ=Block];
	"shifter.187:AL" -> "shifter.188:BL"	 [cond="[]",
		lineno=None];
	"393:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaaab910>",
		def_var="['adderXORsel']",
		fillcolor=deepskyblue,
		label="393:AS
adderXORsel = (xor_AB || cmp_AB)? 'b0 : 'b1;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['xor_AB', 'cmp_AB']"];
	"adder.55:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f02eaa7e650>",
		clk_sens=False,
		fillcolor=gold,
		label="adder.55:AL",
		sens="['x', 'y', 'carry_out', 'XxorY', 'XandY', 'XorY', 'XORsel', 'ORsel']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['ORsel', 'XorY', 'XandY', 'carry_out', 'XxorY', 'carry_in', 'XORsel']"];
	"393:AS" -> "adder.55:AL";
	"364:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaab26d0>",
		def_var="['Y']",
		fillcolor=deepskyblue,
		label="364:AS
Y = Yreg;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Yreg']"];
	"shifter.146:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa26290>",
		def_var="['Zrev']",
		fillcolor=deepskyblue,
		label="shifter.146:AS
Zrev = reverse(Zreg);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['reverse', 'Zreg']"];
	"shifter.156:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa47a10>",
		def_var="['Zout']",
		fillcolor=deepskyblue,
		label="shifter.156:AS
Zout = (!direction)? Zreg : Zrev;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['direction', 'Zreg', 'Zrev']"];
	"shifter.146:AS" -> "shifter.156:AS";
	"shifter.169:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa45710>",
		def_var="['Yor']",
		fillcolor=deepskyblue,
		label="shifter.169:AS
Yor[8] = 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="[]"];
	"428:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f02eaa9b550>",
		fillcolor=turquoise,
		label="428:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"429:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f02eaa9bcd0>",
		fillcolor=springgreen,
		label="429:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"428:BL" -> "429:IF"	 [cond="[]",
		lineno=None];
	"shifter.145:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa260d0>",
		def_var="['Yreg']",
		fillcolor=deepskyblue,
		label="shifter.145:AS
Yreg = { 1'b0, y & value_7 };",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['y', 'value_7']"];
	"shifter.166:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa46f10>",
		def_var="['Yor']",
		fillcolor=deepskyblue,
		label="shifter.166:AS
Yor[5] = (Yreg == 'd5)? 1'b1 : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Yreg']"];
	"shifter.145:AS" -> "shifter.166:AS";
	"shifter.167:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa45250>",
		def_var="['Yor']",
		fillcolor=deepskyblue,
		label="shifter.167:AS
Yor[6] = (Yreg == 'd6)? 1'b1 : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Yreg']"];
	"shifter.145:AS" -> "shifter.167:AS";
	"shifter.168:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa45550>",
		def_var="['Yor']",
		fillcolor=deepskyblue,
		label="shifter.168:AS
Yor[7] = (Yreg == 'd7)? 1'b1 : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Yreg']"];
	"shifter.145:AS" -> "shifter.168:AS";
	"shifter.165:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa46c10>",
		def_var="['Yor']",
		fillcolor=deepskyblue,
		label="shifter.165:AS
Yor[4] = (Yreg == 'd4)? 1'b1 : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Yreg']"];
	"shifter.145:AS" -> "shifter.165:AS";
	"shifter.163:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa46610>",
		def_var="['Yor']",
		fillcolor=deepskyblue,
		label="shifter.163:AS
Yor[2] = (Yreg == 'd2)? 1'b1 : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Yreg']"];
	"shifter.145:AS" -> "shifter.163:AS";
	"shifter.162:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa46310>",
		def_var="['Yor']",
		fillcolor=deepskyblue,
		label="shifter.162:AS
Yor[1] = (Yreg == 'd1)? 1'b1 : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Yreg']"];
	"shifter.145:AS" -> "shifter.162:AS";
	"shifter.161:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa47fd0>",
		def_var="['Yor']",
		fillcolor=deepskyblue,
		label="shifter.161:AS
Yor[0] = (Yreg == 'd0)? 1'b1 : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Yreg']"];
	"shifter.145:AS" -> "shifter.161:AS";
	"shifter.164:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa46910>",
		def_var="['Yor']",
		fillcolor=deepskyblue,
		label="shifter.164:AS
Yor[3] = (Yreg == 'd3)? 1'b1 : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Yreg']"];
	"shifter.145:AS" -> "shifter.164:AS";
	"adder.49:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02ead27250>",
		def_var="['XxorY']",
		fillcolor=deepskyblue,
		label="adder.49:AS
XxorY = x ^ y;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['x', 'y']"];
	"adder.45:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02ead27550>",
		def_var="['xor_result']",
		fillcolor=deepskyblue,
		label="adder.45:AS
xor_result = XxorY;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['XxorY']"];
	"adder.49:AS" -> "adder.45:AS";
	"adder.49:AS" -> "adder.55:AL";
	"384:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaaab390>",
		def_var="['alu_out']",
		fillcolor=deepskyblue,
		label="384:AS
alu_out = ((and_AB || or_AB) && (!sl_AB && !sr_AB))? carry_out[ALU_WIDTH:1] : 
(sl_AB || sr_AB)? shifter_out : adder_out;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['and_AB', 'or_AB', 'sl_AB', 'sr_AB', 'carry_out', 'sl_AB', 'sr_AB', 'shifter_out', 'adder_out']"];
	"427:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f02eaa9b510>",
		clk_sens=False,
		fillcolor=gold,
		label="427:AL",
		sens="['clk', 'reset']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['reset', 'A', 'B', 'clr_Z', 'clr_V', 'alu_out', 'clr_C', 'carry', 'load_inputs', 'clr', 'load_outputs']"];
	"384:AS" -> "427:AL";
	"461:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f02eaaac910>",
		fillcolor=springgreen,
		label="461:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"462:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaacb10>",
		fillcolor=firebrick,
		label="462:NS
Zreg <= 'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaacb10>]",
		style=filled,
		typ=NonblockingSubstitution];
	"461:IF" -> "462:NS"	 [cond="['clr_Z']",
		label=clr_Z,
		lineno=461];
	"472:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaab6290>",
		fillcolor=firebrick,
		label="472:NS
Zreg <= 'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaab6290>]",
		style=filled,
		typ=NonblockingSubstitution];
	"472:NS" -> "Leaf_427:AL"	 [cond="[]",
		lineno=None];
	"372:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa9c690>",
		def_var="['adder_in_b']",
		fillcolor=deepskyblue,
		label="372:AS
adder_in_b = (!sub_AB && !inc_A && !cpl_A && !cpl_B)? (dec_A)? { ALU_WIDTH{ 1'b1 } } : Breg : 
(sub_AB && !inc_A || cpl_B)? ~\
Breg : 
(!sub_AB && inc_A && !cpl_B)? 'd0 : 
(cpl_A)? 'd0 : adder_in_b;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['sub_AB', 'inc_A', 'cpl_A', 'cpl_B', 'dec_A', 'Breg', 'sub_AB', 'inc_A', 'cpl_B', 'Breg', 'sub_AB', 'inc_A', 'cpl_B', 'cpl_A', '\
adder_in_b']"];
	"372:AS" -> "372:AS";
	"shifter.152:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa26ed0>",
		def_var="['z']",
		fillcolor=deepskyblue,
		label="shifter.152:AS
z = (!direction)? Zout[SHIFTER_WIDTH-1:0] : { Xmsb, Zout[SHIFTER_WIDTH-1:1] } | ((y[2:0] == 0)? 'd0 : Zrev_copy);",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['direction', 'Zout', 'Xmsb', 'Zout', 'y', 'Zrev_copy']"];
	"shifter.152:AS" -> "384:AS";
	"shifter.158:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa47cd0>",
		def_var="['Xreg']",
		fillcolor=deepskyblue,
		label="shifter.158:AS
Xreg = (!direction)? { 1'b0, x } : Xrev;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['direction', 'x', 'Xrev']"];
	"shifter.Leaf_187:AL"	 [def_var="['Zreg']",
		label="shifter.Leaf_187:AL"];
	"shifter.Leaf_187:AL" -> "shifter.146:AS";
	"shifter.Leaf_187:AL" -> "shifter.156:AS";
	"470:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaab6110>",
		fillcolor=firebrick,
		label="470:NS
Zreg <= 'b1;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaab6110>]",
		style=filled,
		typ=NonblockingSubstitution];
	"470:NS" -> "Leaf_427:AL"	 [cond="[]",
		lineno=None];
	"shifter.188:BL" -> "shifter.Leaf_187:AL"	 [cond="[]",
		lineno=None];
	"463:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f02eaaacb50>",
		fillcolor=springgreen,
		label="463:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"464:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaaccd0>",
		fillcolor=firebrick,
		label="464:NS
Creg <= 'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaaccd0>]",
		style=filled,
		typ=NonblockingSubstitution];
	"463:IF" -> "464:NS"	 [cond="['clr_C']",
		label=clr_C,
		lineno=463];
	"367:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaab2a90>",
		def_var="['V']",
		fillcolor=deepskyblue,
		label="367:AS
V = Vreg;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Vreg']"];
	"379:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa9ce50>",
		def_var="['carry_in']",
		fillcolor=deepskyblue,
		label="379:AS
carry_in = (sub_AB || inc_A || inc_B)? 1'b1 : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['sub_AB', 'inc_A', 'inc_B']"];
	"379:AS" -> "adder.55:AL";
	"adder.56:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f02eae566d0>",
		fillcolor=turquoise,
		label="adder.56:BL
carry_out[0] <= carry_in;
z[0] <= XxorY[0] ^ (carry_out[0] & XORsel);
carry_out[1] <= XandY[0] | (carry_out[0] | ORsel) & \
XorY[0];
z[1] <= XxorY[1] ^ (carry_out[1] & XORsel);
carry_out[2] <= XandY[1] | (carry_out[1] | ORsel) & XorY[1];
z[2] <= XxorY[\
2] ^ (carry_out[2] & XORsel);
carry_out[3] <= XandY[2] | (carry_out[2] | ORsel) & XorY[2];
z[3] <= XxorY[3] ^ (carry_out[3] & XORsel);
\
carry_out[4] <= XandY[3] | (carry_out[3] | ORsel) & XorY[3];
z[4] <= XxorY[4] ^ (carry_out[4] & XORsel);
carry_out[5] <= XandY[4] | (\
carry_out[4] | ORsel) & XorY[4];
z[5] <= XxorY[5] ^ (carry_out[5] & XORsel);
carry_out[6] <= XandY[5] | (carry_out[5] | ORsel) & \
XorY[5];
z[6] <= XxorY[6] ^ (carry_out[6] & XORsel);
carry_out[7] <= XandY[6] | (carry_out[6] | ORsel) & XorY[6];
z[7] <= XxorY[\
7] ^ (carry_out[7] & XORsel);
carry_out[8] <= XandY[7] | (carry_out[7] | ORsel) & XorY[7];",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaa7e750>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f02eaa7eb10>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaa7ef10>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7f02eae613d0>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eae617d0>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7f02eae61c50>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eae480d0>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7f02eae48510>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eae48910>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7f02eae48d90>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eae531d0>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7f02eae53650>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eae53a50>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7f02eae53ed0>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eae56310>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7f02eae56790>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eae56b90>]",
		style=filled,
		typ=Block];
	"adder.Leaf_55:AL"	 [def_var="['z', 'carry_out']",
		label="adder.Leaf_55:AL"];
	"adder.56:BL" -> "adder.Leaf_55:AL"	 [cond="[]",
		lineno=None];
	"451:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f02eaaac3d0>",
		fillcolor=springgreen,
		label="451:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"452:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f02eaaac7d0>",
		fillcolor=turquoise,
		label="452:BL
Areg <= 'd0;
Breg <= 'd0;
Yreg <= 'd0;
Creg <= 'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaac590>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f02eaaac6d0>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaac810>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7f02eaaac950>]",
		style=filled,
		typ=Block];
	"451:IF" -> "452:BL"	 [cond="['clr']",
		label=clr,
		lineno=451];
	"366:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaab2950>",
		def_var="['C']",
		fillcolor=deepskyblue,
		label="366:AS
C = Creg;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Creg']"];
	"Leaf_427:AL" -> "364:AS";
	"Leaf_427:AL" -> "372:AS";
	"Leaf_427:AL" -> "367:AS";
	"Leaf_427:AL" -> "366:AS";
	"370:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaab2c90>",
		def_var="['adder_in_a']",
		fillcolor=deepskyblue,
		label="370:AS
adder_in_a = (cpl_B)? 'd0 : 
(cpl_A)? ~Areg : 
(inc_B)? 1'b0 : 
(dec_B)? { ALU_WIDTH{ 1'b1 } } : Areg;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['cpl_B', 'cpl_A', 'Areg', 'inc_B', 'dec_B', 'Areg']"];
	"Leaf_427:AL" -> "370:AS";
	"406:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaaa1890>",
		def_var="['shifter_inB']",
		fillcolor=deepskyblue,
		label="406:AS
shifter_inB = Breg;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Breg']"];
	"Leaf_427:AL" -> "406:AS";
	"365:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaab2810>",
		def_var="['Z']",
		fillcolor=deepskyblue,
		label="365:AS
Z = Zreg;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Zreg']"];
	"Leaf_427:AL" -> "365:AS";
	"405:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaaa1750>",
		def_var="['shifter_inA']",
		fillcolor=deepskyblue,
		label="405:AS
shifter_inA = Areg;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['Areg']"];
	"Leaf_427:AL" -> "405:AS";
	"403:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaaa1610>",
		def_var="['shifter_direction']",
		fillcolor=deepskyblue,
		label="403:AS
shifter_direction = (sr_AB)? 'b1 : 'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['sr_AB']"];
	"403:AS" -> "shifter.152:AS";
	"403:AS" -> "shifter.158:AS";
	"shifter.154:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa475d0>",
		def_var="['c']",
		fillcolor=deepskyblue,
		label="shifter.154:AS
c = (!direction)? Zout[SHIFTER_WIDTH] : Zout[0];",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['direction', 'Zout', 'Zout']"];
	"403:AS" -> "shifter.154:AS";
	"shifter.147:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa26590>",
		def_var="['Xrev']",
		fillcolor=deepskyblue,
		label="shifter.147:AS
Xrev = (!direction)? reverse({ 1'b0, x }) : reverse({ x, 1'b0 });",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['direction', 'reverse', 'x', 'reverse', 'x']"];
	"403:AS" -> "shifter.147:AS";
	"403:AS" -> "shifter.156:AS";
	"389:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaaab690>",
		def_var="['adderORsel']",
		fillcolor=deepskyblue,
		label="389:AS
adderORsel = (or_AB)? 'b1 : 'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['or_AB']"];
	"389:AS" -> "adder.55:AL";
	"396:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaaabe50>",
		def_var="['carry']",
		fillcolor=deepskyblue,
		label="396:AS
carry = (add_AB && !and_AB && !or_AB && !xor_AB && !cpl_B && !clr)? carry_out[ALU_WIDTH] : 
(and_AB || or_AB || xor_AB || \
cpl_B || clr)? 'b0 : 
(sl_AB || sr_AB)? shifter_carry : carry;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['add_AB', 'and_AB', 'or_AB', 'xor_AB', 'cpl_B', 'clr', 'carry_out', 'and_AB', 'or_AB', 'xor_AB', 'cpl_B', 'clr', 'sl_AB', 'sr_AB', '\
shifter_carry', 'carry']"];
	"shifter.154:AS" -> "396:AS";
	"466:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaace90>",
		fillcolor=firebrick,
		label="466:NS
Vreg <= 'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaace90>]",
		style=filled,
		typ=NonblockingSubstitution];
	"466:NS" -> "Leaf_427:AL"	 [cond="[]",
		lineno=None];
	"adder.51:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa7e110>",
		def_var="['XorY']",
		fillcolor=deepskyblue,
		label="adder.51:AS
XorY = x | y;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['x', 'y']"];
	"adder.51:AS" -> "adder.55:AL";
	"adder.46:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02ead277d0>",
		def_var="['or_result']",
		fillcolor=deepskyblue,
		label="adder.46:AS
or_result = XorY;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['XorY']"];
	"adder.51:AS" -> "adder.46:AS";
	"shifter.183:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f02eaa45c10>",
		fillcolor=turquoise,
		label="shifter.183:BL
update_extra_bits = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f02eaa45f50>]",
		style=filled,
		typ=Block];
	"shifter.Leaf_182:AL"	 [def_var="['update_extra_bits']",
		label="shifter.Leaf_182:AL"];
	"shifter.183:BL" -> "shifter.Leaf_182:AL"	 [cond="[]",
		lineno=None];
	"370:AS" -> "adder.49:AS";
	"370:AS" -> "adder.51:AS";
	"adder.50:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02ead27b10>",
		def_var="['XandY']",
		fillcolor=deepskyblue,
		label="adder.50:AS
XandY = x & y;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['x', 'y']"];
	"370:AS" -> "adder.50:AS";
	"shifter.147:AS" -> "shifter.158:AS";
	"462:NS" -> "Leaf_427:AL"	 [cond="[]",
		lineno=None];
	"adder.50:AS" -> "adder.55:AL";
	"adder.47:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02ead27490>",
		def_var="['and_result']",
		fillcolor=deepskyblue,
		label="adder.47:AS
and_result = XandY;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['XandY']"];
	"adder.50:AS" -> "adder.47:AS";
	"446:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f02eaaac250>",
		fillcolor=springgreen,
		label="446:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"447:NS"	 [ast="<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaac390>",
		fillcolor=firebrick,
		label="447:NS
Yreg <= alu_out;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaaac390>]",
		style=filled,
		typ=NonblockingSubstitution];
	"446:IF" -> "447:NS"	 [cond="['load_outputs']",
		label=load_outputs,
		lineno=446];
	"shifter.182:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f02eaa45e90>",
		clk_sens=False,
		fillcolor=gold,
		label="shifter.182:AL",
		sens="['x', 'y', 'direction']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="[]"];
	"shifter.182:AL" -> "shifter.183:BL"	 [cond="[]",
		lineno=None];
	"430:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f02eaa9bb90>",
		fillcolor=turquoise,
		label="430:BL
Areg <= 'd0;
Breg <= 'd0;
Yreg <= 'd0;
Zreg <= 'b1;
Creg <= 'b0;
Vreg <= 'b0;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaa9b6d0>, <pyverilog.vparser.ast.NonblockingSubstitution object \
at 0x7f02eaa9b810>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaa9b950>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7f02eaa9ba90>, <pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaa9bbd0>, <pyverilog.vparser.ast.NonblockingSubstitution \
object at 0x7f02eaa9bd10>]",
		style=filled,
		typ=Block];
	"429:IF" -> "430:BL"	 [cond="['reset']",
		label=reset,
		lineno=429];
	"440:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f02eaaac1d0>",
		fillcolor=turquoise,
		label="440:BL
Creg <= carry;",
		statements="[<pyverilog.vparser.ast.NonblockingSubstitution object at 0x7f02eaab62d0>]",
		style=filled,
		typ=Block];
	"429:IF" -> "440:BL"	 [cond="['reset']",
		label="!(reset)",
		lineno=429];
	"465:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f02eaaacd10>",
		fillcolor=springgreen,
		label="465:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"465:IF" -> "466:NS"	 [cond="['clr_V']",
		label=clr_V,
		lineno=465];
	"469:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f02eaab60d0>",
		fillcolor=springgreen,
		label="469:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"469:IF" -> "472:NS"	 [cond="['alu_out']",
		label="!((alu_out == 'd0))",
		lineno=469];
	"469:IF" -> "470:NS"	 [cond="['alu_out']",
		label="(alu_out == 'd0)",
		lineno=469];
	"adder.55:AL" -> "adder.56:BL"	 [cond="[]",
		lineno=None];
	"shifter.149:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa26b90>",
		def_var="['Xmsb']",
		fillcolor=deepskyblue,
		label="shifter.149:AS
Xmsb = (y[2:0] == 0)? x[SHIFTER_WIDTH - 1] : 1'b0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="['y', 'x']"];
	"shifter.149:AS" -> "shifter.152:AS";
	"361:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaab2590>",
		def_var="['logic0']",
		fillcolor=deepskyblue,
		label="361:AS
logic0 = 'd0;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="[]"];
	"shifter.136:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaa08e50>",
		def_var="['value_7']",
		fillcolor=deepskyblue,
		label="shifter.136:AS
value_7 = 'h7;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="[]"];
	"shifter.136:AS" -> "shifter.145:AS";
	"adder.Leaf_55:AL" -> "384:AS";
	"adder.Leaf_55:AL" -> "adder.55:AL";
	"adder.Leaf_55:AL" -> "396:AS";
	"406:AS" -> "shifter.145:AS";
	"406:AS" -> "shifter.152:AS";
	"406:AS" -> "shifter.149:AS";
	"430:BL" -> "Leaf_427:AL"	 [cond="[]",
		lineno=None];
	"440:BL" -> "461:IF"	 [cond="[]",
		lineno=None];
	"440:BL" -> "463:IF"	 [cond="[]",
		lineno=None];
	"440:BL" -> "451:IF"	 [cond="[]",
		lineno=None];
	"440:BL" -> "446:IF"	 [cond="[]",
		lineno=None];
	"440:BL" -> "465:IF"	 [cond="[]",
		lineno=None];
	"440:BL" -> "469:IF"	 [cond="[]",
		lineno=None];
	"441:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f02eaa9bed0>",
		fillcolor=springgreen,
		label="441:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"440:BL" -> "441:IF"	 [cond="[]",
		lineno=None];
	"360:AS"	 [ast="<pyverilog.vparser.ast.Assign object at 0x7f02eaab2450>",
		def_var="['logic1']",
		fillcolor=deepskyblue,
		label="360:AS
logic1 = 'd1;",
		statements="[]",
		style=filled,
		typ=Assign,
		use_var="[]"];
	"452:BL" -> "Leaf_427:AL"	 [cond="[]",
		lineno=None];
	"396:AS" -> "396:AS";
	"396:AS" -> "427:AL";
	"464:NS" -> "Leaf_427:AL"	 [cond="[]",
		lineno=None];
	"447:NS" -> "Leaf_427:AL"	 [cond="[]",
		lineno=None];
	"shifter.156:AS" -> "shifter.152:AS";
	"shifter.156:AS" -> "shifter.154:AS";
	"427:AL" -> "428:BL"	 [cond="[]",
		lineno=None];
	"405:AS" -> "shifter.158:AS";
	"405:AS" -> "shifter.147:AS";
	"405:AS" -> "shifter.149:AS";
	"441:IF" -> "442:BL"	 [cond="['load_inputs']",
		label=load_inputs,
		lineno=441];
}
