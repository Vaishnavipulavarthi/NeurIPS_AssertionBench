strict digraph "" {
	node [label="\N"];
	"769:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fae5e225f90>",
		fillcolor=lightcyan,
		label="769:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"769:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fae5e106050>",
		fillcolor=cadetblue,
		label="769:BS
allow_pid = 2'b01;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fae5e106050>]",
		style=filled,
		typ=BlockingSubstitution];
	"769:CA" -> "769:BS"	 [cond="[]",
		lineno=None];
	"766:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7fae5e1061d0>",
		clk_sens=False,
		fillcolor=gold,
		label="766:AL",
		sens="['pid_DATA0', 'pid_DATA1', 'pid_DATA2', 'pid_MDATA']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['pid_MDATA', 'pid_DATA2', 'pid_DATA1', 'pid_DATA0']"];
	"767:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7fae5e106450>",
		fillcolor=linen,
		label="767:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"766:AL" -> "767:CS"	 [cond="[]",
		lineno=None];
	"767:CS" -> "769:CA"	 [cond="['pid_DATA0', 'pid_DATA1', 'pid_DATA2', 'pid_MDATA']",
		label="{ pid_DATA0, pid_DATA1, pid_DATA2, pid_MDATA }",
		lineno=767];
	"771:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fae5e106950>",
		fillcolor=lightcyan,
		label="771:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"767:CS" -> "771:CA"	 [cond="['pid_DATA0', 'pid_DATA1', 'pid_DATA2', 'pid_MDATA']",
		label="{ pid_DATA0, pid_DATA1, pid_DATA2, pid_MDATA }",
		lineno=767];
	"770:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fae5e106790>",
		fillcolor=lightcyan,
		label="770:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"767:CS" -> "770:CA"	 [cond="['pid_DATA0', 'pid_DATA1', 'pid_DATA2', 'pid_MDATA']",
		label="{ pid_DATA0, pid_DATA1, pid_DATA2, pid_MDATA }",
		lineno=767];
	"768:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7fae5e1065d0>",
		fillcolor=lightcyan,
		label="768:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"767:CS" -> "768:CA"	 [cond="['pid_DATA0', 'pid_DATA1', 'pid_DATA2', 'pid_MDATA']",
		label="{ pid_DATA0, pid_DATA1, pid_DATA2, pid_MDATA }",
		lineno=767];
	"771:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fae5e1069d0>",
		fillcolor=cadetblue,
		label="771:BS
allow_pid = 2'b11;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fae5e1069d0>]",
		style=filled,
		typ=BlockingSubstitution];
	"771:CA" -> "771:BS"	 [cond="[]",
		lineno=None];
	"768:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fae5e106650>",
		fillcolor=cadetblue,
		label="768:BS
allow_pid = 2'b00;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fae5e106650>]",
		style=filled,
		typ=BlockingSubstitution];
	"Leaf_766:AL"	 [def_var="['allow_pid']",
		label="Leaf_766:AL"];
	"768:BS" -> "Leaf_766:AL"	 [cond="[]",
		lineno=None];
	"769:BS" -> "Leaf_766:AL"	 [cond="[]",
		lineno=None];
	"770:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fae5e106810>",
		fillcolor=cadetblue,
		label="770:BS
allow_pid = 2'b10;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7fae5e106810>]",
		style=filled,
		typ=BlockingSubstitution];
	"770:CA" -> "770:BS"	 [cond="[]",
		lineno=None];
	"771:BS" -> "Leaf_766:AL"	 [cond="[]",
		lineno=None];
	"770:BS" -> "Leaf_766:AL"	 [cond="[]",
		lineno=None];
	"768:CA" -> "768:BS"	 [cond="[]",
		lineno=None];
}
