strict digraph "" {
	node [label="\N"];
	"1795:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f13b55d4410>",
		fillcolor=turquoise,
		label="1795:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1797:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f13b55d4f90>",
		fillcolor=springgreen,
		label="1797:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1795:BL" -> "1797:IF"	 [cond="[]",
		lineno=None];
	"1811:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f13b5590050>",
		fillcolor=springgreen,
		label="1811:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1817:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f13b5590090>",
		fillcolor=springgreen,
		label="1817:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1811:IF" -> "1817:IF"	 [cond="['pid_DATA', 'rx_valid', 'rx_active', 'rx_err']",
		label="!((pid_DATA && rx_valid && rx_active && !rx_err))",
		lineno=1811];
	"1812:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f13b55907d0>",
		fillcolor=turquoise,
		label="1812:BL
data_valid_d = 1'b1;
next_state = DATA;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5590810>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5590990>]",
		style=filled,
		typ=Block];
	"1811:IF" -> "1812:BL"	 [cond="['pid_DATA', 'rx_valid', 'rx_active', 'rx_err']",
		label="(pid_DATA && rx_valid && rx_active && !rx_err)",
		lineno=1811];
	"1819:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f13b5590110>",
		fillcolor=turquoise,
		label="1819:BL
seq_err = !rx_err;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5590150>]",
		style=filled,
		typ=Block];
	"1821:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f13b5590310>",
		fillcolor=springgreen,
		label="1821:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1819:BL" -> "1821:IF"	 [cond="[]",
		lineno=None];
	"1844:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5583650>",
		fillcolor=cadetblue,
		label="1844:BS
next_state = IDLE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5583650>]",
		style=filled,
		typ=BlockingSubstitution];
	"Leaf_1777:AL"	 [def_var="['got_pid_ack', 'data_done', 'seq_err', 'data_valid_d', 'token_le_1', 'token_le_2', 'pid_le_sm', 'next_state']",
		label="Leaf_1777:AL"];
	"1844:BS" -> "Leaf_1777:AL"	 [cond="[]",
		lineno=None];
	"1800:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f13b5583350>",
		fillcolor=springgreen,
		label="1800:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1800:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5583390>",
		fillcolor=cadetblue,
		label="1800:BS
next_state = IDLE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5583390>]",
		style=filled,
		typ=BlockingSubstitution];
	"1800:IF" -> "1800:BS"	 [cond="['rx_active']",
		label="(!rx_active)",
		lineno=1800];
	"1842:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f13b5583910>",
		fillcolor=turquoise,
		label="1842:BL
data_done = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b55837d0>]",
		style=filled,
		typ=Block];
	"1844:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f13b5583950>",
		fillcolor=springgreen,
		label="1844:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1842:BL" -> "1844:IF"	 [cond="[]",
		lineno=None];
	"1821:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5590350>",
		fillcolor=cadetblue,
		label="1821:BS
next_state = IDLE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5590350>]",
		style=filled,
		typ=BlockingSubstitution];
	"1821:BS" -> "Leaf_1777:AL"	 [cond="[]",
		lineno=None];
	"1826:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f13b5583a10>",
		fillcolor=springgreen,
		label="1826:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1832:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f13b5583a50>",
		fillcolor=springgreen,
		label="1832:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1826:IF" -> "1832:IF"	 [cond="['rx_valid', 'rx_active', 'rx_err']",
		label="!((rx_valid && rx_active && !rx_err))",
		lineno=1826];
	"1827:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f13b5583f50>",
		fillcolor=turquoise,
		label="1827:BL
token_le_2 = 1'b1;
next_state = IDLE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5583f90>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5594110>]",
		style=filled,
		typ=Block];
	"1826:IF" -> "1827:BL"	 [cond="['rx_valid', 'rx_active', 'rx_err']",
		label="(rx_valid && rx_active && !rx_err)",
		lineno=1826];
	"1835:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5583c90>",
		fillcolor=cadetblue,
		label="1835:BS
next_state = IDLE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5583c90>]",
		style=filled,
		typ=BlockingSubstitution];
	"1835:BS" -> "Leaf_1777:AL"	 [cond="[]",
		lineno=None];
	"1798:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f13b55831d0>",
		fillcolor=turquoise,
		label="1798:BL
got_pid_ack = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5583210>]",
		style=filled,
		typ=Block];
	"1798:BL" -> "1800:IF"	 [cond="[]",
		lineno=None];
	"1817:IF" -> "1819:BL"	 [cond="['rx_active', 'rx_err', 'rx_valid', 'pid_TOKEN', 'pid_DATA']",
		label="(!rx_active || rx_err || rx_valid && !(pid_TOKEN || pid_DATA))",
		lineno=1817];
	"1794:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f13b55943d0>",
		fillcolor=lightcyan,
		label="1794:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1794:CA" -> "1795:BL"	 [cond="[]",
		lineno=None];
	"1788:CS"	 [ast="<pyverilog.vparser.ast.CaseStatement object at 0x7f13b5594450>",
		fillcolor=linen,
		label="1788:CS",
		statements="[]",
		style=filled,
		typ=CaseStatement];
	"1788:CS" -> "1794:CA"	 [cond="['state']",
		label=state,
		lineno=1788];
	"1789:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f13b5594510>",
		fillcolor=lightcyan,
		label="1789:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1788:CS" -> "1789:CA"	 [cond="['state']",
		label=state,
		lineno=1788];
	"1824:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f13b5594950>",
		fillcolor=lightcyan,
		label="1824:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1788:CS" -> "1824:CA"	 [cond="['state']",
		label=state,
		lineno=1788];
	"1838:CA"	 [ast="<pyverilog.vparser.ast.Case object at 0x7f13b5594a10>",
		fillcolor=lightcyan,
		label="1838:CA",
		statements="[]",
		style=filled,
		typ=Case];
	"1788:CS" -> "1838:CA"	 [cond="['state']",
		label=state,
		lineno=1788];
	"1833:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f13b5583a90>",
		fillcolor=turquoise,
		label="1833:BL
seq_err = !rx_err;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5583ad0>]",
		style=filled,
		typ=Block];
	"1835:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f13b5583c50>",
		fillcolor=springgreen,
		label="1835:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1833:BL" -> "1835:IF"	 [cond="[]",
		lineno=None];
	"1839:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f13b5594a90>",
		fillcolor=turquoise,
		label="1839:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1840:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f13b5594ad0>",
		fillcolor=springgreen,
		label="1840:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1839:BL" -> "1840:IF"	 [cond="[]",
		lineno=None];
	"1841:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f13b5594d90>",
		fillcolor=springgreen,
		label="1841:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1839:BL" -> "1841:IF"	 [cond="[]",
		lineno=None];
	"1777:AL"	 [ast="<pyverilog.vparser.ast.Always object at 0x7f13b5594f10>",
		clk_sens=False,
		fillcolor=gold,
		label="1777:AL",
		sens="['state', 'rx_valid', 'rx_active', 'rx_err', 'pid_ACK', 'pid_TOKEN', 'pid_DATA']",
		statements="[]",
		style=filled,
		typ=Always,
		use_var="['rx_err', 'rx_valid', 'state', 'rx_active', 'pid_TOKEN', 'pid_DATA', 'pid_ACK']"];
	"1779:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f13b559f350>",
		fillcolor=turquoise,
		label="1779:BL
next_state = state;
pid_le_sm = 1'b0;
token_le_1 = 1'b0;
token_le_2 = 1'b0;
data_valid_d = 1'b0;
data_done = 1'b0;
seq_err = \
1'b0;
got_pid_ack = 1'b0;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b559f390>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b559f4d0>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b559f610>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b559f750>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b559f890>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b559fa10>, <\
pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b559fb50>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b559fc90>]",
		style=filled,
		typ=Block];
	"1777:AL" -> "1779:BL"	 [cond="[]",
		lineno=None];
	"1840:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5594b10>",
		fillcolor=cadetblue,
		label="1840:BS
data_valid_d = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5594b10>]",
		style=filled,
		typ=BlockingSubstitution];
	"1840:IF" -> "1840:BS"	 [cond="['rx_valid', 'rx_active', 'rx_err']",
		label="(rx_valid && rx_active && !rx_err)",
		lineno=1840];
	"1779:BL" -> "1788:CS"	 [cond="[]",
		lineno=None];
	"1812:BL" -> "Leaf_1777:AL"	 [cond="[]",
		lineno=None];
	"1841:IF" -> "1842:BL"	 [cond="['rx_active', 'rx_err']",
		label="(!rx_active || rx_err)",
		lineno=1841];
	"1797:IF" -> "1798:BL"	 [cond="['pid_ACK', 'rx_err']",
		label="(pid_ACK && !rx_err)",
		lineno=1797];
	"1804:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f13b557d090>",
		fillcolor=springgreen,
		label="1804:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1797:IF" -> "1804:IF"	 [cond="['pid_ACK', 'rx_err']",
		label="!((pid_ACK && !rx_err))",
		lineno=1797];
	"1835:IF" -> "1835:BS"	 [cond="['rx_active']",
		label="(!rx_active)",
		lineno=1835];
	"1790:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f13b5594590>",
		fillcolor=turquoise,
		label="1790:BL
pid_le_sm = 1'b1;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b55945d0>]",
		style=filled,
		typ=Block];
	"1789:CA" -> "1790:BL"	 [cond="[]",
		lineno=None];
	"1825:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f13b55949d0>",
		fillcolor=turquoise,
		label="1825:BL",
		statements="[]",
		style=filled,
		typ=Block];
	"1824:CA" -> "1825:BL"	 [cond="[]",
		lineno=None];
	"1792:IF"	 [ast="<pyverilog.vparser.ast.IfStatement object at 0x7f13b5594710>",
		fillcolor=springgreen,
		label="1792:IF",
		statements="[]",
		style=filled,
		typ=IfStatement];
	"1792:BS"	 [ast="<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5594750>",
		fillcolor=cadetblue,
		label="1792:BS
next_state = ACTIVE;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5594750>]",
		style=filled,
		typ=BlockingSubstitution];
	"1792:IF" -> "1792:BS"	 [cond="['rx_valid', 'rx_active']",
		label="(rx_valid && rx_active)",
		lineno=1792];
	"1790:BL" -> "1792:IF"	 [cond="[]",
		lineno=None];
	"1832:IF" -> "1833:BL"	 [cond="['rx_active', 'rx_err']",
		label="(!rx_active || rx_err)",
		lineno=1832];
	"1840:BS" -> "Leaf_1777:AL"	 [cond="[]",
		lineno=None];
	"1825:BL" -> "1826:IF"	 [cond="[]",
		lineno=None];
	"1800:BS" -> "Leaf_1777:AL"	 [cond="[]",
		lineno=None];
	"1805:BL"	 [ast="<pyverilog.vparser.ast.Block object at 0x7f13b5590cd0>",
		fillcolor=turquoise,
		label="1805:BL
token_le_1 = 1'b1;
next_state = TOKEN;",
		statements="[<pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5590d10>, <pyverilog.vparser.ast.BlockingSubstitution object at 0x7f13b5590e50>]",
		style=filled,
		typ=Block];
	"1805:BL" -> "Leaf_1777:AL"	 [cond="[]",
		lineno=None];
	"1844:IF" -> "1844:BS"	 [cond="['rx_active']",
		label="(!rx_active)",
		lineno=1844];
	"1792:BS" -> "Leaf_1777:AL"	 [cond="[]",
		lineno=None];
	"1821:IF" -> "1821:BS"	 [cond="['rx_active']",
		label="(!rx_active)",
		lineno=1821];
	"1804:IF" -> "1811:IF"	 [cond="['pid_TOKEN', 'rx_valid', 'rx_active', 'rx_err']",
		label="!((pid_TOKEN && rx_valid && rx_active && !rx_err))",
		lineno=1804];
	"1804:IF" -> "1805:BL"	 [cond="['pid_TOKEN', 'rx_valid', 'rx_active', 'rx_err']",
		label="(pid_TOKEN && rx_valid && rx_active && !rx_err)",
		lineno=1804];
	"1827:BL" -> "Leaf_1777:AL"	 [cond="[]",
		lineno=None];
	"1838:CA" -> "1839:BL"	 [cond="[]",
		lineno=None];
}
