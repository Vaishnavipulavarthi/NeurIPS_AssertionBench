digraph "()" {
	s_cnt -> s_cnt	 [weight=1.0];
	s_cnt -> "divider_unit.dividend_i"	 [weight=1.0];
	"divider_unit.divide_i" -> "divider_unit.grand_dividend"	 [weight=2.0];
	"divider_unit.divide_i" -> "divider_unit.done_o"	 [weight=2.0];
	"divider_unit.divide_i" -> "divider_unit.divide_count"	 [weight=2.0];
	"divider_unit.divide_i" -> "divider_unit.quotient"	 [weight=3.0];
	"divider_unit.divide_i" -> "divider_unit.grand_divisor"	 [weight=2.0];
	"divider_unit.divide_i" -> "divider_unit.quotient_reg"	 [weight=1.0];
	"divider_unit.grand_dividend" -> "divider_unit.subtract_node"	 [weight=1.0];
	"divider_unit.divisor_i" -> "divider_unit.grand_divisor"	 [weight=1.0];
	"divider_unit.done_o" -> "divider_unit.quotient"	 [weight=1.0];
	"divider_unit.done_o" -> divide_done	 [weight=1.0];
	"divider_unit.done_o" -> "divider_unit.quotient_reg"	 [weight=1.0];
	"divider_unit.clk_en_i" -> "divider_unit.grand_dividend"	 [weight=2.0];
	"divider_unit.clk_en_i" -> "divider_unit.done_o"	 [weight=6.0];
	"divider_unit.clk_en_i" -> "divider_unit.divide_count"	 [weight=2.0];
	"divider_unit.clk_en_i" -> "divider_unit.quotient"	 [weight=3.0];
	"divider_unit.clk_en_i" -> "divider_unit.grand_divisor"	 [weight=2.0];
	"divider_unit.clk_en_i" -> "divider_unit.quotient_reg"	 [weight=1.0];
	"divider_unit.divisor_node" -> "divider_unit.grand_divisor"	 [weight=1.0];
	"divider_unit.N_PP" -> "divider_unit.grand_dividend"	 [weight=1.0];
	"divider_unit.N_PP" -> "divider_unit.divisor_node"	 [weight=1.0];
	"divider_unit.N_PP" -> "divider_unit.quotient_node"	 [weight=1.0];
	"divider_unit.S_PP" -> "divider_unit.grand_dividend"	 [weight=1.0];
	"divider_unit.S_PP" -> "divider_unit.done_o"	 [weight=2.0];
	"divider_unit.S_PP" -> "divider_unit.divide_count"	 [weight=1.0];
	"divider_unit.S_PP" -> "divider_unit.quotient"	 [weight=2.0];
	"divider_unit.S_PP" -> "divider_unit.grand_divisor"	 [weight=1.0];
	"divider_unit.S_PP" -> "divider_unit.quotient_reg"	 [weight=1.0];
	clk_i -> "divider_unit.clk_i"	 [weight=1.0];
	rising_edge -> s_cnt	 [weight=2.0];
	rising_edge -> "divider_unit.divide_i"	 [weight=1.0];
	rising_edge -> t_cnt	 [weight=2.0];
	rising_edge -> ack_r	 [weight=2.0];
	"divider_unit.quotient_o" -> dat_o	 [weight=1.0];
	"divider_unit.R_PP" -> "divider_unit.grand_dividend"	 [weight=2.0];
	"divider_unit.R_PP" -> "divider_unit.done_o"	 [weight=2.0];
	"divider_unit.R_PP" -> "divider_unit.divide_count"	 [weight=1.0];
	"divider_unit.R_PP" -> "divider_unit.quotient"	 [weight=2.0];
	"divider_unit.R_PP" -> "divider_unit.grand_divisor"	 [weight=2.0];
	"divider_unit.R_PP" -> "divider_unit.quotient_reg"	 [weight=1.0];
	"divider_unit.R_PP" -> "divider_unit.quotient_node"	 [weight=1.0];
	"divider_unit.divide_count" -> "divider_unit.grand_dividend"	 [weight=1.0];
	"divider_unit.divide_count" -> "divider_unit.done_o"	 [weight=2.0];
	"divider_unit.divide_count" -> "divider_unit.divide_count"	 [weight=2.0];
	"divider_unit.divide_count" -> "divider_unit.quotient"	 [weight=2.0];
	"divider_unit.divide_count" -> "divider_unit.grand_divisor"	 [weight=1.0];
	"divider_unit.divide_count" -> "divider_unit.quotient_reg"	 [weight=1.0];
	t_cnt -> "divider_unit.divisor_i"	 [weight=1.0];
	t_cnt -> t_cnt	 [weight=1.0];
	"divider_unit.quotient" -> "divider_unit.quotient_o"	 [weight=1.0];
	"divider_unit.quotient" -> "divider_unit.quotient_node"	 [weight=1.0];
	divide_done -> stb_o	 [weight=1.0];
	rst_i -> s_cnt	 [weight=2.0];
	rst_i -> t_cnt	 [weight=2.0];
	rst_i -> "divider_unit.rst_i"	 [weight=1.0];
	rst_i -> pwm_ff_2	 [weight=2.0];
	rst_i -> ack_r	 [weight=2.0];
	rst_i -> pwm_ff_1	 [weight=2.0];
	"divider_unit.rst_i" -> "divider_unit.grand_dividend"	 [weight=3.0];
	"divider_unit.rst_i" -> "divider_unit.done_o"	 [weight=7.0];
	"divider_unit.rst_i" -> "divider_unit.divide_count"	 [weight=3.0];
	"divider_unit.rst_i" -> "divider_unit.quotient"	 [weight=4.0];
	"divider_unit.rst_i" -> "divider_unit.grand_divisor"	 [weight=3.0];
	"divider_unit.rst_i" -> "divider_unit.quotient_reg"	 [weight=1.0];
	clk_en_i -> s_cnt	 [weight=1.0];
	clk_en_i -> t_cnt	 [weight=1.0];
	pwm_signal_i -> s_cnt	 [weight=1.0];
	pwm_signal_i -> pwm_ff_1	 [weight=1.0];
	stb_o -> "divider_unit.divide_i"	 [weight=1.0];
	stb_o -> ack_r	 [weight=3.0];
	"divider_unit.M_PP" -> "divider_unit.grand_dividend"	 [weight=2.0];
	"divider_unit.M_PP" -> "divider_unit.done_o"	 [weight=2.0];
	"divider_unit.M_PP" -> "divider_unit.divide_count"	 [weight=1.0];
	"divider_unit.M_PP" -> "divider_unit.quotient"	 [weight=2.0];
	"divider_unit.M_PP" -> "divider_unit.grand_divisor"	 [weight=1.0];
	"divider_unit.M_PP" -> "divider_unit.quotient_reg"	 [weight=1.0];
	"divider_unit.grand_divisor" -> "divider_unit.divisor_node"	 [weight=1.0];
	"divider_unit.grand_divisor" -> "divider_unit.subtract_node"	 [weight=1.0];
	"divider_unit.quotient_reg" -> "divider_unit.quotient_o"	 [weight=1.0];
	pwm_ff_2 -> rising_edge	 [weight=1.0];
	ack_r -> stb_o	 [weight=1.0];
	pwm_ff_1 -> rising_edge	 [weight=1.0];
	pwm_ff_1 -> pwm_ff_2	 [weight=1.0];
	ack_i -> ack_r	 [weight=1.0];
	"divider_unit.subtract_node" -> "divider_unit.grand_dividend"	 [weight=2.0];
	"divider_unit.subtract_node" -> "divider_unit.quotient_node"	 [weight=1.0];
	"divider_unit.quotient_node" -> "divider_unit.quotient"	 [weight=2.0];
	"divider_unit.quotient_node" -> "divider_unit.quotient_reg"	 [weight=1.0];
	"divider_unit.dividend_i" -> "divider_unit.grand_dividend"	 [weight=1.0];
}
